mads 1.9.9
     1 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2 				;
     3 				; RAMDISK ULTIMATE for SpartaDOS 3 for tfhh SRAM512k and U1MB
     4 				;   COMPY and RAMBO up to 1024k
     5 				;   by hjx (x) 2020
     6 				;
     7 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     8 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     9 				;
    10 				; System equates
    11 				;
    12 				; OS EQUATES
    13 				; ----------
    14 				; 
    15 				; IO EQUATES
    16 				; 
    17 = 0002			ICCOM       = $0002
    18 = 0008			ICBLL       = $0008
    19 = 0009			ICBLH       = $0009
    20 				; 
    21 				; OS VARIABLES FOR XL/XE
    22 				; 
    23 				; PAGE 0
    24 				; 
    25 = 000A			DOSVEC      = $000A
    26 = 000C			DOSINI      = $000C
    27 = 0012			RTCLOK      = $0012
    28 = 0032			BUFRLO      = $0032
    29 = 0033			BUFRHI      = $0033
    30 = 0034			BFENLO      = $0034
    31 = 0035			BFENHI      = $0035
    32 = 00D0			ZBNKSWTMSK  = $00D0
    33 				; 
    34 				; PAGE 2
    35 				; 
    36 = 022F			SDMCTL      = $022F
    37 = 02E7			MEMLO       = $02E7
    38 				; 
    39 				; PAGE 3
    40 				; 
    41 = 0300			DDEVIC      = $0300
    42 = 0301			DUNIT       = $0301
    43 = 0302			DCOMND      = $0302
    44 = 0304			DBUFLO      = $0304
    45 = 0305			DBUFHI      = $0305
    46 = 0308			DBYTLO      = $0308
    47 = 0309			DBYTHI      = $0309
    48 = 030A			DAUX1       = $030A
    49 = 030B			DAUX2       = $030B
    50 = 0340			IOCB0       = $0340
    51 				; 
    52 				; PIA
    53 				; 
    54 				;        PORTB $D301 XE
    55 				;        
    56 				;        0 - OS ROM on=1 off=0
    57 				;        1 - BASIC  on=0 off=1
    58 				;        2 - Bank-Switch
    59 				;        3 - Bank-Switch
    60 				;        4 - CPU-Switch   off=1 on=0
    61 				;        5 - ANTIC-Switch off=1 on=0
    62 				;        6 - unsued
    63 				;        7 - Self-Test on=0(if 0 is on) off=1
    64 				;        
    65 = D300			PORTA       = $D300
    66 = D301			PORTB       = $D301
    67 = D302			PACTL       = $D302
    68 = D303			PBCTL       = $D303
    69 				; 
    70 				; ANTIC
    71 				; 
    72 = D40E			NMIEN       = $D40E
    73 				; 
    74 				; ROM VECTORS
    75 				; 
    76 = E456			CIOV        = $E456
    77 				;
    78 				; SpartaDOS 
    79 				;
    80 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    81 = 003F			SD_LBUF        = $3F ; offset to line buffer
    82 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    83 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    84 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    85
    86 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    87 				;
    88 				; Start of code
    89 				;
    90 				            org $3000
    91 				            
    92 				; memory addresses to check for alias of main memory
    93 FFFF> 3000-3932> 00	RB256TEST1  .byte $00 
    94 3001 00			RB256TEST2  .byte $00
    95
    96 				; bit mask kind Rambo1 ($00), Rambo2 ($01), or Compy ($FF)
    97 3002 FF			USEDMASK    .byte $FF
    98 				            
    99 3003			start
   100 3003 20 70 37		            jsr PRINT
   101 3006 52 61 6D 64 69 73 +             .byte 'Ramdisk Ultimate vers54 by hjx',$9B,$FF
   102 				       
   103 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   104 				;
   105 				; determine extended memory
   106 				;
   107 3026 A9 F3		            lda #<BNKSWTMSK             ; check Compy
   108 3028 85 D0		            sta ZBNKSWTMSK
   109 302A A9 38		            lda #>BNKSWTMSK
   110 302C 85 D1		            sta ZBNKSWTMSK+1
   111 302E 20 53 36		            jsr CHKBNKS
   112 3031 8E E4 38		            stx BNKCNT
   113
   114 3034 A9 F0		            lda #<BNKSWTMSKR1           ; check Rambo1
   115 3036 85 D0		            sta ZBNKSWTMSK
   116 3038 A9 36		            lda #>BNKSWTMSKR1
   117 303A 85 D1		            sta ZBNKSWTMSK+1
   118 303C 20 53 36		            jsr CHKBNKS
   119 303F EC E4 38		            cpx BNKCNT
   120 3042 30 0A		            bmi check_r2
   121 3044 F0 08		            beq check_r2
   122 3046 A9 00		            lda #$00
   123 3048 8D 02 30		            sta USEDMASK                ; used mask $00 Rambo1
   124 304B 8E E4 38		            stx BNKCNT                  ; save higher cnt
   125
   126 304E A9 30		check_r2    lda #<BNKSWTMSKR2           ; check Rambo2
   127 3050 85 D0		            sta ZBNKSWTMSK
   128 3052 A9 37		            lda #>BNKSWTMSKR2
   129 3054 85 D1		            sta ZBNKSWTMSK+1
   130 3056 20 53 36		            jsr CHKBNKS
   131 3059 EC E4 38		            cpx BNKCNT
   132 305C 30 1A		            bmi check_r1
   133 305E F0 18		            beq check_r1
   134 3060 A9 01		            lda #$01
   135 3062 8D 02 30		            sta USEDMASK                ; used mask $01 Rambo2
   136 3065 8E E4 38		            stx BNKCNT                  ; save higher cnt
   137
   138 3068 A2 00		            ldx #$00                    ; copy Rambo2 to mask
   139 306A BD 30 37		CPYR2M      lda BNKSWTMSKR2,X
   140 306D 9D F3 38		            sta BNKSWTMSK,X
   141 3070 E8			            inx
   142 3071 E0 40		            cpx #$40  
   143 3073 D0 F5		            bne CPYR2M
   144 3075 4C 8A 30		            jmp start_rambo
   145
   146 3078			check_r1
   147 3078 2C 02 30		            bit USEDMASK
   148 307B 30 22		            bmi start_compy
   149 307D A2 00		            ldx #$00                    ; copy Rambo1 to mask
   150 307F BD F0 36		CPYR1M      lda BNKSWTMSKR1,X
   151 3082 9D F3 38		            sta BNKSWTMSK,X
   152 3085 E8			            inx
   153 3086 E0 40		            cpx #$40  
   154 3088 D0 F5		            bne CPYR1M
   155
   156 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   157 				;
   158 				; write kind of extended memory
   159 				;            
   160 308A			start_rambo
   161 308A 20 70 37		            jsr PRINT
   162 308D 20 20 46 6F 75 6E +             .byte '  Found Rambo ',$FF
   163 309C 4C B5 30		            jmp start_check
   164
   165 309F			start_compy
   166 309F E0 04		            cpx #$04
   167 30A1 90 12		            bcc start_check
   168 30A3 20 70 37		            jsr PRINT
   169 30A6 20 20 46 6F 75 6E +             .byte '  Found Compy ',$FF
   170
   171 30B5			start_check
   172 				; check bank count
   173 30B5 AE E4 38		            ldx BNKCNT
   174 30B8 E0 04		            cpx #$04
   175 30BA 90 15		            bcc EXT_NO
   176 30BC D0 36		            bne EXT_192
   177 30BE 20 70 37		            jsr PRINT
   178 30C1 36 34 6B 20 62 69 +             .byte '64k bits 23',$9B,$FF
   179 30CE 4C 07 32		            jmp EXT_END
   180 				; no banks            
   181 30D1 20 70 37		EXT_NO      jsr PRINT
   182 30D4 20 20 45 72 72 6F +             .byte '  Error: No extended memory',$9B,$FF
   183 30F1 4C 3F 32		            jmp PRNHLP
   184 				            
   185 30F4 E0 0C		EXT_192     cpx #$0C
   186 30F6 F0 17		            beq EXT_256
   187 30F8 B0 32		            bcs EXT_320
   188 30FA 20 70 37		            jsr PRINT
   189 30FD 31 32 38 4B 20 62 +             .byte '128K bits 236',$9B,$FF
   190 310C 4C 07 32		            jmp EXT_END
   191
   192 310F 20 70 37		EXT_256     jsr PRINT
   193 3112 31 39 32 4B 20 62 +             .byte '192K bits 2365 w/main',$9B,$FF
   194 3129 4C 07 32		            jmp EXT_END
   195 				            
   196 312C E0 10		EXT_320     cpx #$10
   197 312E D0 31		            bne EXT_576
   198 3130 2C 02 30		            bit USEDMASK
   199 3133 30 16		            bmi CMP_320
   200 3135 20 70 37		            jsr PRINT
   201 3138 32 35 36 4B 20 62 +             .byte '256K bits 2365',$9B,$FF
   202 3148 4C 07 32		            jmp EXT_END
   203 314B 20 70 37		CMP_320     jsr PRINT
   204 314E 32 35 36 4B 20 62 +             .byte '256K bits 2367',$9B,$FF
   205 315E 4C 07 32		            jmp EXT_END
   206
   207 3161 E0 20		EXT_576     cpx #$20
   208 3163 D0 4C		            bne EXT_1088     
   209 3165 2C 02 30		            bit USEDMASK
   210 3168 30 30		            bmi CMP_576
   211 316A D0 17		            bne RA2_576
   212 316C 20 70 37		            jsr PRINT
   213 316F 35 31 32 4B 20 62 +             .byte '512K bits 23651',$9B,$FF
   214 3180 4C 07 32		            jmp EXT_END
   215 3183 20 70 37		RA2_576     jsr PRINT
   216 3186 35 31 32 4B 20 62 +             .byte '512K bits 23657',$9B,$FF
   217 3197 4C 07 32		            jmp EXT_END
   218 319A 20 70 37		CMP_576     jsr PRINT
   219 319D 35 31 32 4B 20 62 +             .byte '512K bits 23671',$9B,$FF
   220 31AE 4C 07 32		            jmp EXT_END
   221
   222 31B1 E0 40		EXT_1088    cpx #$40
   223 31B3 F0 03		            beq EXT_1088EQ
   224 31B5 4C D1 30		            jmp EXT_NO
   225 31B8 2C 02 30		EXT_1088EQ  bit USEDMASK
   226 31BB 30 34		            bmi CMP_1088
   227 31BD D0 19		            bne RA2_1088
   228 31BF 20 70 37		            jsr PRINT
   229 31C2 31 30 32 34 4B 20 +             .byte '1024K bits 236517',$9B,$FF
   230 31D5 4C 07 32		            jmp EXT_END
   231 31D8 20 70 37		RA2_1088    jsr PRINT
   232 31DB 31 30 32 34 4B 20 +             .byte '1024K bits 236571',$9B,$FF
   233 31EE 4C 07 32		            jmp EXT_END
   234 31F1 20 70 37		CMP_1088    jsr PRINT
   235 31F4 31 30 32 34 4B 20 +             .byte '1024K bits 236710',$9B,$FF
   236
   237 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   238 				;
   239 				; parse parameter
   240 				;
   241 3207 A0 0A		EXT_END     ldy #SD_BUFOFF
   242 3209 B1 0A		            lda (DOSVEC),Y
   243 320B 18			            clc
   244 320C 69 3F		            adc #SD_LBUF
   245 320E A8			            tay
   246 320F B1 0A		            lda (DOSVEC),Y
   247 3211 C9 9B		            cmp #$9B
   248 3213 F0 03		            beq ERRDRVNR
   249 3215 4C 04 33		            jmp PRSPARM
   250 				; no parameter -> error
   251 3218 20 70 37		ERRDRVNR    jsr PRINT
   252 321B 20 20 45 72 72 6F +             .byte '  Error: No drive number specified',$9B,$FF
   253 323F			PRNHLP
   254 323F 20 70 37		            jsr PRINT
   255 3242 20 20 46 6F 72 20 +             .byte '  For Ultimate 1MB and tfhh 512kSRAM',$9B
   256 3267 20 20 55 73 65 3A +             .byte '  Use: RAMDISKU Dx: [/EDF]',$9B
   257 3282 20 20 20 20 78 20 +             .byte '    x - drive number for ramdisk',$9B
   258 32A3 20 20 20 20 45 20 +             .byte '    E - use 64K less extended memory',$9B
   259 32C8 20 20 20 20 44 20 +             .byte '    D - install ramdisk driver',$9B
   260 32E7 20 20 20 20 46 20 +             .byte '    F - format ramdisk',$9B,$FF
   261 32FF 60			            rts
   262 				; jump for jsr to crunch name
   263 3300 4C FF FF		CRNAME      jmp $FFFF
   264
   265 3303 00			RDBNKCNT    .byte $00
   266
   267 				; set crunch name address
   268 3304 A5 0A		PRSPARM     lda DOSVEC
   269 3306 18			            clc
   270 3307 69 03		            adc #SD_ZCRNAME
   271 3309 8D 01 33		            sta CRNAME+1
   272 330C A5 0B		            lda DOSVEC+1
   273 330E 69 00		            adc #$00
   274 3310 8D 02 33		            sta CRNAME+2
   275 				; get drive number SD_COMFNAM starts alway with Dx:
   276 3313 20 00 33		            jsr CRNAME
   277 3316 D0 47		            bne PARAMERR
   278 3318 A0 22		            ldy #SD_COMFNAM+1
   279 331A B1 0A		            lda (DOSVEC),Y
   280 331C 29 0F		            and #$0F
   281 331E 8D F2 38		            sta DRVNUM
   282 				; check options /EDF
   283 3321 20 00 33		            jsr CRNAME
   284 3324 F0 64		            beq PRSPAREND
   285 3326 A0 24		            ldy #SD_COMFNAM+3
   286 3328 B1 0A		            lda (DOSVEC),Y
   287 332A C9 2F		            cmp #'/'
   288 332C D0 31		            bne PARAMERR
   289 332E C8			PRSPARLOOP  iny
   290 332F B1 0A		            lda (DOSVEC),Y
   291 3331 C9 9B		            cmp #$9B
   292 3333 F0 55		            beq PRSPAREND
   293 				; save 4 banks for 130XE compatibilty
   294 3335 C9 45		            cmp #'E'
   295 3337 D0 08		            bne PRSPARNXT1
   296 3339 A9 04		            lda #$04
   297 333B 8D E5 38		            sta SPARBNKS
   298 333E 4C 2E 33		            jmp PRSPARLOOP
   299 				; check install driver only
   300 3341 C9 44		PRSPARNXT1  cmp #'D'
   301 3343 D0 0B		            bne PRSPARNXT2
   302 3345 A9 FF		            lda #$FF
   303 3347 8D 89 33		            sta CHKPAROPT
   304 334A 8D 08 34		            sta CHKINIDRV
   305 334D 4C 2E 33		            jmp PRSPARLOOP
   306 				; check format             
   307 3350 C9 46		PRSPARNXT2  cmp #'F'
   308 3352 D0 0B		            bne PARAMERR
   309 3354 A9 FF		            lda #$FF
   310 3356 8D 89 33		            sta CHKPAROPT
   311 3359 8D A7 34		            sta CHKFRMT
   312 335C 4C 2E 33		            jmp PRSPARLOOP
   313 335F 20 70 37		PARAMERR    jsr PRINT
   314 3362 20 20 45 72 72 6F +             .byte '  Error: Wrong parameter specified',$9B,$FF
   315 3386 4C 3F 32		            jmp PRNHLP
   316
   317 3389 00			CHKPAROPT   .byte $00
   318
   319 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   320 				;
   321 				; check for spare banks
   322 				;
   323 338A			PRSPAREND
   324 338A AD E5 38		            lda SPARBNKS
   325 338D F0 53		            beq BNKCNTOK
   326 338F 20 70 37		            jsr PRINT
   327 3392 20 20 55 73 65 20 +             .byte '  Use 64K less extended memory',$9B,$FF
   328 33B2 AD E4 38		            lda BNKCNT
   329 33B5 C9 04		            cmp #$04
   330 33B7 D0 29		            bne BNKCNTOK
   331 33B9 20 70 37		            jsr PRINT
   332 33BC 20 20 45 72 72 6F +             .byte '  Error: No extra extended memory',$9B,$FF
   333 33DF 4C 3F 32		            jmp PRNHLP
   334 33E2			BNKCNTOK
   335 				; set format and ini by options
   336 33E2 2C 89 33		            bit CHKPAROPT
   337 33E5 30 08		            bmi STRTINIFMT ; no options set default /DF
   338 33E7 A9 FF		            lda #$FF
   339 33E9 8D 08 34		            sta CHKINIDRV
   340 33EC 8D A7 34		            sta CHKFRMT
   341
   342 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   343 				;
   344 				; check for init driver and format
   345 				;
   346 33EF			STRTINIFMT
   347 				; install driver requested
   348 33EF 2C 08 34		            bit CHKINIDRV
   349 33F2 10 03		            bpl NOINIDRV
   350 33F4 20 09 34		            jsr INIDRV
   351 33F7			NOINIDRV
   352 				; format if requested
   353 33F7 2C 89 33		            bit CHKPAROPT
   354 33FA 30 03		            bmi NOPREFRMT
   355 33FC 20 6D 34		            jsr PREFRMT
   356 33FF			NOPREFRMT
   357 33FF 2C A7 34		            bit CHKFRMT
   358 3402 10 03		            bpl NOFRMTRD
   359 3404 20 A8 34		            jsr FRMTRD
   360 3407			NOFRMTRD
   361 3407 60			            rts
   362
   363 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   364 				;
   365 				; Subroutine install driver
   366 				;
   367 3408 00			CHKINIDRV   .byte $00
   368
   369 3409			INIDRV
   370 				; set jsr to original DOSINI
   371 3409 A5 0C		            lda DOSINI
   372 340B 8D A7 37		            sta JSRDOSINI+1
   373 340E A5 0D		            lda DOSINI+1
   374 3410 8D A8 37		            sta JSRDOSINI+2
   375 				; set MEMLO oldaddress, realloc
   376 3413 AD E7 02		            lda MEMLO
   377 3416 8D F6 3A		            sta READSTADR
   378 3419 8D FC 3A		            sta CPYTOADR
   379 341C AD E8 02		            lda MEMLO+1
   380 341F 8D F7 3A		            sta READSTADR+1
   381 3422 8D FD 3A		            sta CPYTOADR+1
   382 				; start realloc
   383 3425 20 00 3B		            jsr REASTART
   384 				; set new DOSINI            
   385 3428 A9 A6		REAL001     lda #<JSRDOSINI
   386 342A 85 0C		            sta DOSINI
   387 342C A9 37		REAH001     lda #>JSRDOSINI
   388 342E 85 0D		            sta DOSINI+1
   389 				; get SIO and patch for RAMDISK
   390 3430 38			            sec
   391 3431 A5 0A		            lda DOSVEC
   392 3433 E9 0A		            sbc #SD_LSIO
   393 3435 85 32		            sta BUFRLO
   394 3437 A5 0B		            lda DOSVEC+1
   395 3439 E9 00		            sbc #$00
   396 343B 85 33		            sta BUFRHI
   397 343D A0 00		            ldy #$00
   398 343F B1 32		            lda (BUFRLO),Y
   399 3441 8D C4 37		REAA001     sta JMPSIO+1      ;realloc $33CA
   400 3444 A9 B4		REAL002     lda #<RAMDSIO
   401 3446 91 32		            sta (BUFRLO),Y
   402 3448 C8			            iny
   403 3449 B1 32		            lda (BUFRLO),Y
   404 344B 8D C5 37		REAA002     sta JMPSIO+2      ;realloc $33D4
   405 344E A9 37		REAH002     lda #>RAMDSIO
   406 3450 91 32		            sta (BUFRLO),Y
   407 				; set MEMLO            
   408 3452 20 A9 37		REAA003     jsr SETMEMLO      ;realloc $33DB
   409 				; message
   410 3455 20 70 37		            jsr PRINT
   411 3458 20 20 44 72 69 76 +             .byte '  Driver installed',$9B,$FF
   412 346C 60			            rts
   413
   414
   415 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   416 				;
   417 				; Subroutine preserve ramdisk
   418 				;
   419 346D			PREFRMT
   420 				; switch off interrupts
   421 346D 78			            sei
   422 346E A9 00		            lda #$00
   423 3470 8D 0E D4		            sta NMIEN
   424 				; switch bank
   425 3473 AD 01 D3		            lda PORTB
   426 3476 48			            pha
   427 3477 AE E5 38		            ldx SPARBNKS
   428 347A BD F3 38		            lda BNKSWTMSK,X
   429 347D 8D 01 D3		            sta PORTB
   430 				; compare
   431 3480 A2 16		            ldx #$16
   432 3482 BD 28 36		CHKFRMTLOOP lda RDHEAD,X
   433 3485 DD 00 40		            cmp $4000,X
   434 3488 D0 0D		            bne CHKNOPREFRMT
   435 348A E8			            inx
   436 348B E0 21		            cpx #$21
   437 348D D0 F3		            bne CHKFRMTLOOP
   438 				; clear format flag
   439 348F A9 00		            lda #$00
   440 3491 8D A7 34		            sta CHKFRMT
   441 3494 4C 9C 34		            jmp CHKPREFRMTEND
   442 3497			CHKNOPREFRMT
   443 3497 A9 FF		            lda #$FF
   444 3499 8D A7 34		            sta CHKFRMT
   445 349C			CHKPREFRMTEND
   446 				; restore PORTB
   447 349C 68			            pla
   448 349D 8D 01 D3		            sta PORTB
   449 				; enable interrupts
   450 34A0 A9 E0		            lda #$E0
   451 34A2 8D 0E D4		            sta NMIEN
   452 34A5 58			            cli
   453 				; set format flag
   454 34A6 60			            rts
   455 				            
   456 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   457 				;
   458 				; Subroutine format ramdisk
   459 				;
   460 34A7 00			CHKFRMT     .byte $00
   461
   462 34A8			FRMTRD
   463 				; switch off interrupts
   464 34A8 78			            sei
   465 34A9 A9 00		            lda #$00
   466 34AB 8D 0E D4		            sta NMIEN
   467 				; switch bank
   468 34AE AD 01 D3		            lda PORTB
   469 34B1 48			            pha
   470 34B2 AE E5 38		            ldx SPARBNKS
   471 34B5 BD F3 38		            lda BNKSWTMSK,X
   472 34B8 8D 01 D3		            sta PORTB
   473 				; clear loop
   474 34BB A9 00		            lda #$00
   475 34BD A8			            tay
   476 34BE 99 00 40		FRMTCLP     sta $4000,Y
   477 34C1 99 00 41		            sta $4100,Y
   478 34C4 99 00 42		            sta $4200,Y
   479 34C7 99 00 43		            sta $4300,Y
   480 34CA 99 00 44		            sta $4400,Y
   481 34CD 99 00 45		            sta $4500,Y
   482 34D0 99 00 46		            sta $4600,Y
   483 34D3 C8			            iny
   484 34D4 D0 E8		            bne FRMTCLP
   485 				; header loop            
   486 34D6 A0 2A		            ldy #$2A
   487 34D8 B9 28 36		FRMTHLP     lda RDHEAD,Y
   488 34DB 99 00 40		            sta $4000,Y
   489 34DE 88			            dey
   490 34DF 10 F7		            bpl FRMTHLP
   491 34E1 A9 60		            lda #$60    ; write RTS to second boot sector
   492 34E3 8D 80 40		            sta $4080   ; see header jmp $3080
   493 				; calc banks for ramdisk            
   494 34E6 AD E4 38		            lda BNKCNT
   495 34E9 38			            sec
   496 34EA ED E5 38		            sbc SPARBNKS
   497 34ED AA			            tax
   498 34EE 8E 03 33		            stx RDBNKCNT
   499 				; set size loop
   500 34F1 A0 00		            ldy #$00
   501 34F3 BD 8D 35		FRMTSLP     lda RDSIZE-4,X
   502 34F6 99 0B 40		            sta $400B,Y       ; total number of sectors on the disk
   503 34F9 E8			            inx               ; and number of free sectors on the disk
   504 34FA C8			            iny
   505 34FB C0 04		            cpy #$04
   506 34FD D0 F4		            bne FRMTSLP
   507 				; set free sector VTOC             
   508 34FF AD 03 33		            lda RDBNKCNT
   509 3502 4A			            lsr
   510 3503 4A			            lsr
   511 3504 AA			            tax
   512 3505 20 84 35		FRMTVTOCLP  jsr FILLHSEC
   513 3508 AD 89 35		            lda L34AF+1
   514 350B 18			            clc
   515 350C 69 40		            adc #$40
   516 350E 8D 89 35		            sta L34AF+1
   517 3511 AD 8A 35		            lda L34AF+2
   518 3514 69 00		            adc #$00
   519 3516 8D 8A 35		            sta L34AF+2
   520 3519 CA			            dex
   521 351A D0 E9		            bne FRMTVTOCLP
   522 				; set sector numbers in boot sector and correct VTOC
   523 351C AD 03 33		            lda RDBNKCNT
   524 351F AA			            tax
   525 3520 38			            sec
   526 3521 E9 01		            sbc #$01
   527 3523 4A			            lsr
   528 3524 4A			            lsr
   529 3525 4A			            lsr                 ; 8 banks per sector of sector map
   530 3526 18			            clc
   531 3527 69 01		            adc #$01            
   532 3529 8D 0F 40		            sta $400F           ; number of bit map sectors used on the disk
   533 352C 18			            clc
   534 352D 69 04		            adc #$04
   535 352F 8D 09 40		            sta $4009           ; first sector map of the MAIN directory
   536 				; correct free sector map
   537 3532 BD CD 35		            lda RDMAPSZ-4,X 
   538 3535 8D 80 41		            sta $4180
   539 3538 BD CE 35		            lda RDMAPSZ-3,X 
   540 353B 8D 81 41		            sta $4181
   541 				; calc adress for VTOC            
   542 353E BD CF 35		            lda RDMAPSZ-2,X
   543 3541 85 32		            sta BUFRLO
   544 3543 BD D0 35		            lda RDMAPSZ-1,X
   545 3546 85 33		            sta BUFRHI   
   546 3548 A0 04		            ldy #$04
   547 354A AD 09 40		            lda $4009
   548 354D 18			            clc
   549 354E 69 01		            adc #$01
   550 3550 91 32		            sta (BUFRLO),Y
   551 				; create MAIN directory
   552 3552 A2 00		            ldx #$00
   553 3554 A0 80		            ldy #$80
   554 3556 BD 11 36		L349B       lda RDMAIN,X
   555 3559 91 32		            sta (BUFRLO),Y
   556 355B E8			            inx
   557 355C C8			            iny
   558 355D E0 17		            cpx #$17
   559 355F D0 F5		            bne L349B
   560 				; restore PORTB
   561 3561 68			            pla
   562 3562 8D 01 D3		            sta PORTB
   563 				; enable interrupts
   564 3565 A9 E0		            lda #$E0
   565 3567 8D 0E D4		            sta NMIEN
   566 356A 58			            cli
   567 				; write message
   568 356B 20 70 37		            jsr PRINT
   569 356E 20 20 52 61 6D 64 +             .byte '  Ramdisk formatted',$9B,$FF
   570 3583 60			            rts
   571 				; set VTOC            
   572 3584 A0 00		FILLHSEC    ldy #$00
   573 3586 A9 FF		            lda #$FF
   574 3588 99 80 41		L34AF       sta $4180,Y
   575 358B C8			            iny
   576 358C C0 40		            cpy #$40
   577 358E D0 F8		            bne L34AF
   578 3590 60			            rts
   579 				;
   580 				; data array for format ram disk
   581 				;
   582 				;                 total, free number of sectors
   583 3591			RDSIZE
   584 3591 00 02 F9 01		            .word $0200,$01F9 ; 64k
   585 3595 00 04 F9 03		            .word $0400,$03F9 ; 128k
   586 3599 00 06 F8 05		            .word $0600,$05F8 ; 192k
   587 359D 00 08 F8 07		            .word $0800,$07F8 ; 256k
   588 35A1 00 0A F7 09		            .word $0A00,$09F7 ; 320k
   589 35A5 00 0C F7 0B		            .word $0C00,$0BF7 ; 384k
   590 35A9 00 0E F6 0D		            .word $0E00,$0DF6 ; 448k
   591 35AD 00 10 F6 0F		            .word $1000,$0ff6 ; 512k
   592 				; extension for 1088k
   593 35B1 00 00 00 00		            .word $0000,$0000 ; dummy
   594 35B5 00 00 00 00		            .word $0000,$0000 ; dummy
   595 35B9 00 00 00 00		            .word $0000,$0000 ; dummy
   596 35BD 00 00 00 00		            .word $0000,$0000 ; dummy
   597 35C1 00 00 00 00		            .word $0000,$0000 ; dummy
   598 35C5 00 00 00 00		            .word $0000,$0000 ; dummy
   599 35C9 00 1E F2 1D		            .word $1E00,$1DF2 ; 1024-64=960k reserve 4 banks (130XE)
   600 35CD 00 20 F2 1F		            .word $2000,$1ff2 ; 1024k
   601
   602 35D1			RDMAPSZ
   603 35D1 01 FF		            .byte $01,$FF       ; 64k
   604 35D3 00 42		            .word $4200
   605 				            
   606 35D5 01 FF		            .byte $01,$FF       ; 128k
   607 35D7 00 42		            .word $4200
   608 				            
   609 35D9 00 FF		            .byte $00,$FF       ; 192k
   610 35DB 80 42		            .word $4280
   611 				            
   612 35DD 00 FF		            .byte $00,$FF       ; 256k
   613 35DF 80 42		            .word $4280
   614 				            
   615 35E1 00 7F		            .byte $00,$7F       ; 320k
   616 35E3 00 43		            .word $4300
   617 				            
   618 35E5 00 7F		            .byte $00,$7F       ; 384k
   619 35E7 00 43		            .word $4300
   620 				            
   621 35E9 00 3F		            .byte $00,$3F       ; 448k
   622 35EB 80 43		            .word $4380
   623 				            
   624 35ED 00 3F		            .byte $00,$3F       ; 512k
   625 35EF 80 43		            .word $4380
   626
   627 				; extension for 1088k
   628 35F1 00 00		            .byte $00,$00       ; dummy
   629 35F3 00 00		            .word $0000
   630
   631 35F5 00 00		            .byte $00,$00       ; dummy
   632 35F7 00 00		            .word $000
   633
   634 35F9 00 00		            .byte $00,$00       ; dummy
   635 35FB 00 00		            .word $0000
   636
   637 35FD 00 00		            .byte $00,$00       ; dummy
   638 35FF 00 00		            .word $0000
   639
   640 3601 00 00		            .byte $00,$00       ; dummy
   641 3603 00 00		            .word $0000
   642
   643 3605 00 00		            .byte $00,$00       ; dummy
   644 3607 00 00		            .word $0000
   645
   646 3609 00 03		            .byte $00,$03       ; 1024-64=960k reserve 4 banks (130XE)
   647 360B 80 45		            .word $4580
   648
   649 360D 00 03		            .byte $00,$03       ; 1024k 
   650 360F 80 45		            .word $4580
   651
   652 3611			RDMAIN
   653 3611 28			            .byte $28                   ; ???
   654 3612 00 00		            .byte $00,$00               ; Sector number of the parent directory, $00 this is root
   655 3614 17 00 00		            .byte $17,$00,$00           ; Length of the directory in bytes
   656 3617 4D 41 49 4E 20 20 +             .byte 'MAIN       '         ; Name of the directory padded with spaces (8 bytes)
   657 3622 0B 07 47		            .byte $0b,$07,$47           ; Date DD/MM/YY
   658 3625 0B 0B 0B		            .byte $0b,$0b,$0b           ; Time HH:MM:SS
   659
   660 3628			RDHEAD
   661 3628 00			            .byte $00                   ; Usually 0. Some formatting tools put a $53 (='S) for SD here
   662 3629 03			            .byte $03                   ; Number of sectors to boot
   663 362A 00 07		            .byte $00,$07               ; Address where the boot sectors are loaded to
   664 362C E0 07		            .byte $E0,$07               ; This address is copied to DOSINI. 2 bytes
   665 362E 4C 80 30		            .byte $4C,$80,$30           ; execution to code beginning jmp $3080
   666 3631 03 00		            .byte $03,$00               ; Sector number of the first sector map of the MAIN directory
   667 3633 00 04		            .byte $00,$04               ; Total number of sectors on the disk
   668 3635 F9 03		            .byte $F9,$03               ; Number of free sectors on the disk
   669 3637 01			            .byte $01                   ; Number of bit map sectors on the disk
   670 3638 04 00		            .byte $04,$00               ; Sector number of the first bit map sector
   671 363A 20 00		            .byte $20,$00               ; Sector number to begin the file data sector allocation search
   672 363C 00 00		            .byte $00,$00               ; Sector number to begin the directory data sector allocation search
   673 363E 52 41 4D 44 49 53 +             .byte 'RAMDISKU'            ; Disk volume name, 8 chars
   674 3646 00			            .byte $00                   ; Number of tracks on the disk, $00 for ramdisk or HD
   675 3647 80			            .byte $80                   ; Size of the sectors on this disk, $00 = 256 Byte
   676 3648 22			            .byte $22                   ; File system revision number of the disk format
   677 3649 00 00 00 00 00	            .byte $00,$00,$00,$00,$00   ; reserved - no known usage
   678 364E 00			            .byte $00                   ; Volume sequence number
   679 364F 16			            .byte $16                   ; Volume random number
   680 3650 00 00		            .byte $00,$00               ; Sector number of the first sector map of the file to be loaded when the disk is booted
   681 3652 00			            .byte $00                   ; This is the write LOCK flag, $FF locked, $00 unlocked
   682
   683 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   684 				;
   685 				; Subroutine check banks
   686 				;
   687 3653			CHKBNKS
   688 				; save PIA PORT B
   689 3653 AD 01 D3		            lda PORTB
   690 3656 48			            pha
   691 				; switch off interrupts
   692 3657 AD 2F 02		            lda SDMCTL
   693 365A 8D EF 36		            sta SSDMCTL
   694 365D A9 00		            lda #$00
   695 365F 8D 2F 02		            sta SDMCTL
   696 3662 20 E8 36		            jsr WAITSYNC
   697 				; switch off interrupts
   698 3665 78			            sei
   699 3666 A9 00		            lda #$00
   700 3668 8D 0E D4		            sta NMIEN
   701 				; try to save and write banks            
   702 366B A0 3F		            ldy #$3F
   703 366D B1 D0		BNKSAVWRT   lda (ZBNKSWTMSK),Y
   704 366F 8D 01 D3		            sta PORTB
   705 3672 AD 00 70		            lda $7000
   706 3675 99 33 3A		            sta BNKSAVBUF,Y
   707 3678 B1 D0		            lda (ZBNKSWTMSK),Y
   708 367A 8D 00 70		            sta $7000
   709 367D AD 01 70		            lda $7001
   710 3680 99 73 3A		            sta BNKSAVBUF2,Y
   711 3683 B1 D0		            lda (ZBNKSWTMSK),Y
   712 3685 0A			            asl
   713 3686 8D 01 70		            sta $7001
   714 3689 88			            dey
   715 368A 10 E1		            bpl BNKSAVWRT
   716 				; write to check memory aliases (RAMBO 256k)
   717 368C A9 FF		            lda #$FF
   718 368E 8D 00 30		            sta RB256TEST1
   719 3691 A9 FF		            lda #$FF
   720 3693 8D 01 30		            sta RB256TEST2
   721 				; check banks
   722 3696 C8			BNKCHK      iny
   723 3697 B1 D0		            lda (ZBNKSWTMSK),Y
   724 3699 8D 01 D3		            sta PORTB
   725 369C B1 D0		            lda (ZBNKSWTMSK),Y
   726 369E CD 00 70		            cmp $7000
   727 36A1 D0 0D		            bne BNKSTOP
   728 36A3 B1 D0		            lda (ZBNKSWTMSK),Y
   729 36A5 0A			            asl
   730 36A6 CD 01 70		            cmp $7001
   731 36A9 D0 05		            bne BNKSTOP
   732 36AB C0 3F		            cpy #$3F
   733 36AD D0 E7		            bne BNKCHK
   734 36AF C8			            iny
   735 36B0 98			BNKSTOP     tya                 ; save bank count in X
   736 36B1 AA			            tax
   737 				; restore banks
   738 36B2 A0 00		            ldy #$00
   739 36B4 B1 D0		BNKRESTR    lda (ZBNKSWTMSK),Y
   740 36B6 8D 01 D3		            sta PORTB
   741 36B9 B9 33 3A		            lda BNKSAVBUF,Y
   742 36BC 8D 00 70		            sta $7000
   743 36BF B9 73 3A		            lda BNKSAVBUF2,Y
   744 36C2 8D 01 70		            sta $7001
   745 36C5 C8			            iny
   746 36C6 C0 40		            cpy #$40
   747 36C8 D0 EA		            bne BNKRESTR
   748 				; reset check memory aliases (RAMBO 256k)
   749 36CA A9 00		            lda #$00
   750 36CC 8D 00 30		            sta RB256TEST1
   751 36CF A9 00		            lda #$00
   752 36D1 8D 01 30		            sta RB256TEST2
   753 				; restore PIA PORT B
   754 36D4 68			            pla
   755 36D5 8D 01 D3		            sta PORTB
   756 				; enable interrupts
   757 36D8 A9 E0		            lda #$E0
   758 36DA 8D 0E D4		            sta NMIEN
   759 36DD 58			            cli
   760 				; enable interrupts
   761 36DE AD EF 36		            lda SSDMCTL
   762 36E1 8D 2F 02		            sta SDMCTL
   763 36E4 20 E8 36		            jsr WAITSYNC
   764 36E7 60			            rts
   765 				; wait for sync            
   766 36E8 A5 14		WAITSYNC    lda RTCLOK+2
   767 36EA C5 14		WAITLOOP    cmp RTCLOK+2
   768 36EC F0 FC		            beq WAITLOOP
   769 36EE 60			            rts            
   770 36EF 00			SSDMCTL     .byte $00
   771
   772 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   773 				;
   774 				; Bank masks Rambo 1 and 2
   775 				;
   776 36F0			BNKSWTMSKR1
   777 36F0 E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE       ; 1110:0010 1110:0110 1110:1010 1110:1110
   778 36F4 A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE       ; 1010:0010 1010:0110 1010:1010 1010:1110
   779 36F8 C2 C6 CA CE		            .byte $C2,$C6,$CA,$CE       ; 1100:0010 1100:0110 1100:1010 1100:1110
   780 36FC 82 86 8A 8E		            .byte $82,$86,$8A,$8E       ; 1000:0010 1000:0110 1000:1010 1000:1110
   781 3700 E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC       ; 1110:0000 1110:0100 1110:1000 1110:1100
   782 3704 A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC       ; 1010:0000 1010:0100 1010:1000 1010:1100
   783 3708 C0 C4 C8 CC		            .byte $C0,$C4,$C8,$CC       ; 1100:0000 1100:0100 1100:1000 1100:1100
   784 370C 80 84 88 8C		            .byte $80,$84,$88,$8C       ; 1000:0000 1000:0100 1000:1000 1000:1100
   785 				; extension for 1088k
   786 3710 62 66 6A 6E		            .byte $62,$66,$6A,$6E       ; 0110:0010 0110:0110 0110:1010 0110:1110
   787 3714 22 26 2A 2E		            .byte $22,$26,$2A,$2E       ; 0010:0010 0010:0110 0010:1010 0010:1110
   788 3718 42 46 4A 4E		            .byte $42,$46,$4A,$4E       ; 0100:0010 0100:0110 0100:1010 0100:1110
   789 371C 02 06 0A 0E		            .byte $02,$06,$0A,$0E       ; 0000:0010 0000:0110 0000:1010 0000:1110
   790 3720 60 64 68 6C		            .byte $60,$64,$68,$6C       ; 0110:0000 0110:0100 0110:1000 0110:1100
   791 3724 20 24 28 2C		            .byte $20,$24,$28,$2C       ; 0010:0000 0010:0100 0010:1000 0010:1100
   792 3728 40 44 48 4C		            .byte $40,$44,$48,$4C       ; 0100:0000 0100:0100 0100:1000 0100:1100
   793 372C 00 04 08 0C		            .byte $00,$04,$08,$0C       ; 0000:0000 0000:0100 0000:1000 0000:1100
   794
   795 3730			BNKSWTMSKR2
   796 3730 E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE       ; 1110:0010 1110:0110 1110:1010 1110:1110
   797 3734 A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE       ; 1010:0010 1010:0110 1010:1010 1010:1110
   798 3738 C2 C6 CA CE		            .byte $C2,$C6,$CA,$CE       ; 1100:0010 1100:0110 1100:1010 1100:1110
   799 373C 82 86 8A 8E		            .byte $82,$86,$8A,$8E       ; 1000:0010 1000:0110 1000:1010 1000:1110
   800 3740 62 66 6A 6E		            .byte $62,$66,$6A,$6E       ; 0110:0010 0110:0110 0110:1010 0110:1110
   801 3744 22 26 2A 2E		            .byte $22,$26,$2A,$2E       ; 0010:0010 0010:0110 0010:1010 0010:1110
   802 3748 42 46 4A 4E		            .byte $42,$46,$4A,$4E       ; 0100:0010 0100:0110 0100:1010 0100:1110
   803 374C 02 06 0A 0E		            .byte $02,$06,$0A,$0E       ; 0000:0010 0000:0110 0000:1010 0000:1110
   804 				; extension for 1088k
   805 3750 E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC       ; 1110:0000 1110:0100 1110:1000 1110:1100
   806 3754 A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC       ; 1010:0000 1010:0100 1010:1000 1010:1100
   807 3758 C0 C4 C8 CC		            .byte $C0,$C4,$C8,$CC       ; 1100:0000 1100:0100 1100:1000 1100:1100
   808 375C 80 84 88 8C		            .byte $80,$84,$88,$8C       ; 1000:0000 1000:0100 1000:1000 1000:1100
   809 3760 60 64 68 6C		            .byte $60,$64,$68,$6C       ; 0110:0000 0110:0100 0110:1000 0110:1100
   810 3764 20 24 28 2C		            .byte $20,$24,$28,$2C       ; 0010:0000 0010:0100 0010:1000 0010:1100
   811 3768 40 44 48 4C		            .byte $40,$44,$48,$4C       ; 0100:0000 0100:0100 0100:1000 0100:1100
   812 376C 00 04 08 0C		            .byte $00,$04,$08,$0C       ; 0000:0000 0000:0100 0000:1000 0000:1100
   813
   814 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   815 				;
   816 				; print subroutine            
   817 				;
   818 3770 68			PRINT       pla
   819 3771 8D 81 37		            sta PRINTITER+1
   820 3774 68			            pla
   821 3775 8D 82 37		            sta PRINTITER+2
   822 3778 EE 81 37		PRINTLOOP   inc PRINTITER+1
   823 377B D0 03		            bne PRINTITER
   824 377D EE 82 37		            inc PRINTITER+2
   825 3780 AD FF FF		PRINTITER   lda $FFFF
   826 3783 C9 FF		            cmp #$FF
   827 3785 F0 06		            beq PRINTEND
   828 3787 20 96 37		            jsr CIOPUTCHR
   829 378A 4C 78 37		            jmp PRINTLOOP
   830 378D AD 82 37		PRINTEND    lda PRINTITER+2
   831 3790 48			            pha
   832 3791 AD 81 37		            lda PRINTITER+1
   833 3794 48			            pha
   834 3795 60			            rts
   835 				; call cio put char subroutine
   836 3796 A2 00		CIOPUTCHR   ldx #$00
   837 3798 8E 48 03		            stx IOCB0+ICBLL
   838 379B 8E 49 03		            stx IOCB0+ICBLH
   839 379E A0 0B		            ldy #$0B
   840 37A0 8C 42 03		            sty IOCB0+ICCOM
   841 37A3 4C 56 E4		            jmp CIOV
   842
   843
   844 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   845 				;;; BEGIN OF REALLOC BLOCK
   846 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   847 				;
   848 				; start of resident driver
   849 				;
   850 				; to realloc routines
   851 				; DOSINI set MEMLO at reset
   852 37A6			REABEGIN
   853 37A6 20 00 00		JSRDOSINI   jsr $0000
   854
   855 37A9			SETMEMLO    
   856 37A9 A9 33		REAL003     lda #<BNKSAVBUF
   857 37AB 8D E7 02		            sta MEMLO
   858 37AE A9 3A		REAH003     lda #>BNKSAVBUF
   859 37B0 8D E8 02		            sta MEMLO+1
   860 37B3 60			            rts
   861 				; new DOSVEC for RAMDISK device
   862 37B4 AD 00 03		RAMDSIO     lda DDEVIC
   863 37B7 C9 31		            cmp #$31
   864 37B9 D0 08		            bne JMPSIO
   865 37BB AD 01 03		            lda DUNIT
   866 37BE CD F2 38		REAA004     cmp DRVNUM
   867 37C1 F0 03		            beq L358A
   868 37C3 4C 00 00		JMPSIO      jmp $0000
   869 37C6 AD 04 03		L358A       lda DBUFLO
   870 37C9 85 34		            sta BFENLO
   871 37CB AD 05 03		            lda DBUFHI
   872 37CE 85 35		            sta BFENHI
   873 37D0 AD 02 03		            lda DCOMND
   874 				; command STATUS REQUEST
   875 37D3 C9 53		            cmp #$53 
   876 37D5 D0 1B		            bne NEXT1
   877 37D7 AD ED 38		REAA009     lda L36BF
   878 37DA 4A			            lsr
   879 37DB 4A			            lsr
   880 37DC 49 30		            eor #$30
   881 37DE AC E9 38		REAA010     ldy L36BB
   882 37E1 C0 1A		            cpy #$1A
   883 37E3 D0 02		            bne L35B4
   884 37E5 09 80		            ora #$80
   885 37E7 A0 00		L35B4       ldy #$00
   886 37E9 91 34		            sta (BFENLO),Y
   887 37EB C8			            iny
   888 37EC A9 FF		            lda #$FF
   889 37EE 91 34		            sta (BFENLO),Y
   890 37F0 30 22		            bmi JMPSIOEND
   891 				; command RETURN CONFIGURATION
   892 37F2 C9 4E		NEXT1       cmp #$4E
   893 37F4 D0 0C		            bne NEXT2
   894 37F6 A0 0B		            ldy #$0B            ; 12 bytes
   895 37F8			RETCNFLOOP
   896 37F8 B9 E6 38		REAA011     lda CONFBUF,Y
   897 37FB 91 34		            sta (BFENLO),Y
   898 37FD 88			            dey
   899 37FE 10 F8		            bpl RETCNFLOOP
   900 3800 30 12		            bmi JMPSIOEND
   901 				; command SET CONFIGURATION
   902 3802 C9 4F		NEXT2       cmp #$4F
   903 3804 D0 11		            bne NEXT3
   904 3806 A0 07		            ldy #$07
   905 3808 B1 34		            lda (BFENLO),Y
   906 380A 8D ED 38		REAA012     sta L36BF
   907 380D A0 03		            ldy #$03
   908 380F B1 34		            lda (BFENLO),Y
   909 3811 8D E9 38		REAA013     sta L36BB
   910
   911 3814			JMPSIOEND
   912 3814 4C DD 38		REAA014     jmp RDSIOEND
   913 				; command FORMAT DISK
   914 3817 C9 21		NEXT3       cmp #$21
   915 3819 D0 0B		            bne NEXT4
   916 381B A0 00		SIOFRMT     ldy #$00
   917 381D A9 FF		            lda #$FF
   918 381F 91 34		            sta (BFENLO),Y
   919 3821 C8			            iny
   920 3822 91 34		            sta (BFENLO),Y
   921 3824 D0 EE		            bne JMPSIOEND
   922 				; command FORMAT DISK ENHANCED
   923 3826 C9 22		NEXT4       cmp #$22
   924 3828 D0 0C		            bne NEXT5
   925 382A A9 1A		            lda #$1A
   926 382C 8D E9 38		REAA015     sta L36BB
   927 382F A9 80		            lda #$80
   928 3831 8D ED 38		REAA016     sta L36BF
   929 3834 D0 E5		            bne SIOFRMT
   930 				; command GET SECTOR
   931 3836 C9 52		NEXT5       cmp #$52
   932 3838 F0 0B		            beq PUTGETSEC
   933 				; command PUT SECTOR WITH VERIFY
   934 383A C9 57		            cmp #$57
   935 383C F0 07		            beq PUTGETSEC
   936 				; command PUT SECTOR
   937 383E C9 50		            cmp #$50
   938 3840 F0 03		            beq PUTGETSEC
   939 3842 4C E0 38		REAA020     jmp RDSIOEND+3
   940
   941 3845 A9 00		PUTGETSEC   lda #$00
   942 3847 85 32		            sta BUFRLO
   943 3849 AD 0A 03		            lda DAUX1
   944 384C 38			            sec
   945 384D E9 01		            sbc #$01
   946 384F 85 33		            sta BUFRHI
   947 3851 AD 0B 03		            lda DAUX2
   948 3854 E9 00		            sbc #$00
   949 3856 06 33		            asl BUFRHI
   950 3858 2A			            rol
   951 3859 2C 08 03		            bit DBYTLO
   952 385C 30 06		            bmi L3631
   953 385E 0E ED 38		REAA017     asl L36BF
   954 3861 06 33		            asl BUFRHI
   955 3863 2A			            rol
   956 3864 48			L3631       pha
   957 3865 A5 33		            lda BUFRHI
   958 3867 4A			            lsr
   959 3868 4A			            lsr
   960 3869 66 32		            ror BUFRLO
   961 386B 09 40		            ora #$40
   962 386D 85 33		            sta BUFRHI
   963 				            
   964 386F AD 02 03		            lda DCOMND
   965 3872 C9 52		            cmp #$52
   966 3874 F0 0D		            beq L3656
   967 				            
   968 3876 A0 00		            ldy #$00
   969 3878 B1 34		L364B       lda (BFENLO),Y
   970 387A 99 33 39		REAA005     sta BUFFERXX1,Y
   971 387D C8			            iny
   972 387E CC 08 03		            cpy DBYTLO
   973 3881 D0 F5		            bne L364B
   974 				; check bank number
   975 3883 68			L3656       pla
   976 3884 18			            clc
   977 3885 6D E5 38		REAA021     adc SPARBNKS
   978 3888 CD E4 38		REAA018     cmp BNKCNT
   979 388B B0 53		            bcs RDSIOEND+3
   980 				; switch bank
   981 				            
   982 388D A8			            tay
   983 388E AE 01 D3		            ldx PORTB
   984 3891 78			            sei
   985 3892 A9 00		            lda #$00
   986 3894 8D 0E D4		            sta NMIEN
   987 				     
   988 3897 B9 F3 38		REAA019     lda BNKSWTMSK,Y
   989 389A 8D 01 D3		            sta PORTB
   990 				            
   991 389D A0 00		            ldy #$00
   992 389F AD 02 03		            lda DCOMND
   993 38A2 C9 52		            cmp #$52
   994 38A4 D0 23		            bne L369B
   995 				            
   996 38A6 B1 32		L367B       lda (BUFRLO),Y
   997 38A8 99 33 39		REAA006     sta BUFFERXX1,Y
   998 38AB C8			            iny
   999 38AC CC 08 03		            cpy DBYTLO
  1000 38AF D0 F5		            bne L367B
  1001 				; restore bank
  1002 38B1 8E 01 D3		            stx PORTB
  1003 38B4 A9 E0		            lda #$E0
  1004 38B6 8D 0E D4		            sta NMIEN
  1005 38B9 58			            cli
  1006 				             
  1007 38BA A0 00		            ldy #$00
  1008 38BC			L368E
  1009 38BC B9 33 39		REAA008     lda BUFFERXX1,Y
  1010 38BF 91 34		            sta (BFENLO),Y
  1011 38C1 C8			            iny
  1012 38C2 CC 08 03		            cpy DBYTLO
  1013 38C5 D0 F5		            bne L368E
  1014 38C7 F0 14		            beq RDSIOEND
  1015 38C9			L369B
  1016 38C9 B9 33 39		REAA007     lda BUFFERXX1,Y
  1017 38CC 91 32		            sta (BUFRLO),Y
  1018 38CE C8			            iny
  1019 38CF CC 08 03		            cpy DBYTLO
  1020 38D2 D0 F5		            bne L369B
  1021
  1022 38D4 8E 01 D3		            stx PORTB
  1023 38D7 A9 E0		            lda #$E0
  1024 38D9 8D 0E D4		            sta NMIEN
  1025 38DC 58			            cli
  1026 				            
  1027 38DD A0 01		RDSIOEND    ldy #$01
  1028 38DF 2C A0 8B		            bit $8BA0 ; $2c, ldy #$8b
  1029 38E2 98			            tya
  1030 38E3 60			            rts
  1031 				            
  1032 38E4 00			BNKCNT      .byte $00
  1033 38E5 00			SPARBNKS    .byte $00
  1034
  1035 				; drive configuration buffer
  1036 38E6 28 01 12		CONFBUF     .byte $28,$01,$12
  1037 38E9 00 00 00 00		L36BB       .byte $00,$00,$00,$00
  1038 38ED 80 FF 00 00 00	L36BF       .byte $80,$FF,$00,$00,$00
  1039
  1040 38F2 01			DRVNUM      .byte $01
  1041
  1042 				; Compy Shop
  1043 38F3			BNKSWTMSK
  1044 38F3 E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE ; 1110:0010 1110:0110 1110:1010 1110:1110
  1045 38F7 A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE ; 1010:0010 1010:0110 1010:1010 1010:1110
  1046 38FB 62 66 6A 6E		            .byte $62,$66,$6A,$6E ; 0110:0010 0110:0110 0110:1010 0110:1110 
  1047 38FF 22 26 2A 2E		            .byte $22,$26,$2A,$2E ; 0010:0010 0010:0110 0010:1010 0010:1110
  1048 3903 E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC ; 1110:0000 1110:0100 1110:1000 1110:1100
  1049 3907 A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC ; 1010:0000 1010:0100 1010:1000 1010:1100
  1050 390B 60 64 68 6C		            .byte $60,$64,$68,$6C ; 0110:0000 0110:0100 0110:1000 0110:1100
  1051 390F 20 24 28 2C		            .byte $20,$24,$28,$2C ; 0010:0000 0010:0100 0010:1000 0010:1100
  1052 				; extension for 1088k
  1053 3913 E3 E7 EB EF		            .byte $E3,$E7,$EB,$EF ; 1110:0011 1110:0111 1110:1011 1110:1111
  1054 3917 A3 A7 AB AF		            .byte $A3,$A7,$AB,$AF ; 1010:0011 1010:0111 1010:1011 1010:1111
  1055 391B 63 67 6B 6F		            .byte $63,$67,$6B,$6F ; 0110:0011 0110:0111 0110:1011 0110:1111 
  1056 391F 23 27 2B 2F		            .byte $23,$27,$2B,$2F ; 0010:0011 0010:0111 0010:1011 0010:1111
  1057 3923 E1 E5 E9 ED		            .byte $E1,$E5,$E9,$ED ; 1110:0001 1110:0101 1110:1001 1110:1101
  1058 3927 A1 A5 A9 AD		            .byte $A1,$A5,$A9,$AD ; 1010:0001 1010:0101 1010:1001 1010:1101
  1059 392B 61 65 69 6D		            .byte $61,$65,$69,$6D ; 0110:0001 0110:0101 0110:1001 0110:1101
  1060 392F 21 25 29 2D		            .byte $21,$25,$29,$2D ; 0010:0001 0010:0101 0010:1001 0010:1101
  1061 				 
  1062
  1063 				; $100 Bytes
  1064 3933			BUFFERXX1
  1065
  1066 				;            org $37E6
  1067 = 3A33			REAEND      = BUFFERXX1 + $100
  1068 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1069 				;;; END OF REALLOC BLOCK
  1070 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1071
  1072
  1073 				; $20 Bytes extension $40
  1074 = 3A33			BNKSAVBUF   = REAEND
  1075
  1076 				; $20 bytes extension $40
  1077 				;            org $3806
  1078 = 3A73			BNKSAVBUF2  = BNKSAVBUF + $40
  1079
  1080 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1081 				;
  1082 				; Realloc data arrays
  1083 				; 
  1084 				;           org $3826
  1085 3933			            org BNKSAVBUF2 + $40
  1086 				; realloc whole addresses
  1087 3AB3-3BC6> 42 34		REATAB      .word REAA001+1 ;$33CA
  1088 3AB5 4C 34		            .word REAA002+1 ;$33D4
  1089 3AB7 53 34		            .word REAA003+1 ;$33DB
  1090 3AB9 BF 37		            .word REAA004+1 ;$3583
  1091 3ABB 7B 38		            .word REAA005+1 ;$364E
  1092 3ABD A9 38		            .word REAA006+1 ;$367E
  1093 3ABF CA 38		            .word REAA007+1 ;$369C
  1094 3AC1 BD 38		            .word REAA008+1 ;$368F
  1095 3AC3 D8 37		            .word REAA009+1 ;$35A5
  1096 3AC5 DF 37		            .word REAA010+1 ;$35AC
  1097 3AC7 F9 37		            .word REAA011+1 ;$35C6
  1098 3AC9 0B 38		            .word REAA012+1 ;$35D8
  1099 3ACB 12 38		            .word REAA013+1 ;$35DF
  1100 3ACD 15 38		            .word REAA014+1 ;$35E2
  1101 3ACF 2D 38		            .word REAA015+1 ;$35FA
  1102 3AD1 32 38		            .word REAA016+1 ;$35FF
  1103 3AD3 5F 38		            .word REAA017+1 ;$362C
  1104 3AD5 89 38		            .word REAA018+1 ;$365C
  1105 3AD7 98 38		            .word REAA019+1 ;$3667
  1106 3AD9 43 38		            .word REAA020+1 ;$3610
  1107 3ADB 86 38		            .word REAA021+1 ;$3659
  1108 3ADD 00 00		            .word $0000
  1109
  1110 				; realloc address low byte           
  1111 3ADF 29 34		            .word REAL001+1 ;$33B1
  1112 3AE1 45 34		            .word REAL002+1 ;$33CD
  1113 3AE3 AA 37		            .word REAL003+1 ;$356E
  1114 3AE5 00 00		            .word $0000
  1115
  1116 				; realloc address high byte (address to high byte and value of low byte)
  1117 3AE7 2D 34		            .word REAH001+1  ;$33B5
  1118 3AE9 A6			            .byte <JSRDOSINI ;$6A
  1119 				                        
  1120 3AEA 4F 34		            .word REAH002+1 ;$33D7
  1121 3AEC B4			            .byte <RAMDSIO  ;$78
  1122 				            
  1123 3AED AF 37		            .word REAH003+1  ;$3573
  1124 3AEF 33			            .byte <BNKSAVBUF ;$E6
  1125 				            
  1126 3AF0 00 00		            .word $0000
  1127 				            
  1128 				; realloc code pointer
  1129 3AF2 B3 3A		REATABADR   .word REATAB
  1130 3AF4 A6 37		REASRCADR   .word REABEGIN
  1131 3AF6 FF FF		READSTADR   .word $FFFF
  1132
  1133 				; copy code pointer
  1134 3AF8 A6 37		CPYFROMADR  .word REABEGIN
  1135 3AFA 8D 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1136 3AFC FF FF		CPYTOADR    .word $FFFF
  1137
  1138 3AFE 00 00		            .word $0000
  1139
  1140 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1141 				;
  1142 				; Subroutine realloc driver code
  1143 				;
  1144 3B00 A9 00		REASTART    lda #$00
  1145 3B02 8D C4 3B		            sta REALOOPCNT
  1146 3B05 AE C4 3B		REALOOP     ldx REALOOPCNT
  1147 3B08 BD F2 3A		            lda REATABADR,X
  1148 3B0B 8D AA 3B		            sta L3910+1
  1149 3B0E BD F3 3A		            lda REATABADR+1,X
  1150 3B11 8D AB 3B		            sta L3910+2
  1151 3B14 0D AA 3B		            ora L3910+1
  1152 3B17 D0 01		            bne L3881
  1153 3B19 60			            rts
  1154 				            
  1155 3B1A 38			L3881       sec
  1156 3B1B BD F6 3A		            lda READSTADR,X
  1157 3B1E FD F4 3A		            sbc REASRCADR,X
  1158 3B21 8D C5 3B		            sta READIFLO
  1159 3B24 BD F7 3A		            lda READSTADR+1,X
  1160 3B27 FD F5 3A		            sbc REASRCADR+1,X
  1161 3B2A 8D C6 3B		            sta READIFHI
  1162 				            
  1163 3B2D 20 B5 3B		L3894       jsr L391C
  1164 3B30 F0 13		            beq L38AC
  1165 3B32 B1 D7		            lda ($D7),Y
  1166 3B34 18			            clc
  1167 3B35 6D C5 3B		            adc READIFLO
  1168 3B38 91 D7		            sta ($D7),Y
  1169 3B3A C8			            iny
  1170 3B3B B1 D7		            lda ($D7),Y
  1171 3B3D 6D C6 3B		            adc READIFHI
  1172 3B40 91 D7		            sta ($D7),Y
  1173 3B42 4C 2D 3B		            jmp L3894
  1174 3B45 20 B5 3B		L38AC       jsr L391C
  1175 3B48 F0 0B		            beq L38BC
  1176 3B4A B1 D7		            lda ($D7),Y
  1177 3B4C 18			            clc
  1178 3B4D 6D C5 3B		            adc READIFLO
  1179 3B50 91 D7		            sta ($D7),Y
  1180 3B52 4C 45 3B		            jmp L38AC
  1181 3B55 20 B5 3B		L38BC       jsr L391C
  1182 3B58 F0 11		            beq L38D2
  1183 3B5A 20 A9 3B		            jsr L3910
  1184 3B5D 18			            clc
  1185 3B5E 6D C5 3B		            adc READIFLO
  1186 3B61 B1 D7		            lda ($D7),Y
  1187 3B63 6D C6 3B		            adc READIFHI
  1188 3B66 91 D7		            sta ($D7),Y
  1189 3B68 4C 55 3B		            jmp L38BC
  1190 3B6B AE C4 3B		L38D2       ldx REALOOPCNT
  1191
  1192 3B6E BD F8 3A		            lda CPYFROMADR,X
  1193 3B71 8D 8C 3B		            sta L38F2+1
  1194 3B74 BD F9 3A		            lda CPYFROMADR+1,X
  1195 3B77 8D 8D 3B		            sta L38F2+2
  1196
  1197 3B7A BD FC 3A		            lda CPYTOADR,X
  1198 3B7D 8D 8F 3B		            sta L38F2+4
  1199 3B80 BD FD 3A		            lda CPYTOADR+1,X
  1200 3B83 8D 90 3B		            sta L38F2+5
  1201
  1202 3B86 BC FB 3A		            ldy CPYLENGTH+1,X
  1203 3B89 A2 00		            ldx #$00
  1204 3B8B BD FF FF		L38F2       lda $FFFF,X
  1205 3B8E 9D FF FF		            sta $FFFF,X
  1206 3B91 E8			            inx
  1207 3B92 D0 F7		            bne L38F2
  1208 3B94 EE 8D 3B		            inc L38F2+2
  1209 3B97 EE 90 3B		            inc L38F2+5
  1210 3B9A 88			            dey
  1211 3B9B 10 EE		            bpl L38F2
  1212 3B9D AD C4 3B		            lda REALOOPCNT
  1213 3BA0 18			            clc
  1214 3BA1 69 0C		            adc #$0C
  1215 3BA3 8D C4 3B		            sta REALOOPCNT
  1216 3BA6 4C 05 3B		            jmp REALOOP
  1217 				            
  1218 3BA9 AD FF FF		L3910       lda $FFFF
  1219 3BAC EE AA 3B		            inc L3910+1
  1220 3BAF D0 03		            bne L391B
  1221 3BB1 EE AB 3B		            inc L3910+2
  1222 3BB4 60			L391B       rts
  1223
  1224 3BB5 20 A9 3B		L391C       jsr L3910
  1225 3BB8 85 D7		            sta $D7
  1226 3BBA 20 A9 3B		            jsr L3910
  1227 3BBD A0 00		            ldy #$00
  1228 3BBF 85 D8		            sta $D8
  1229 3BC1 05 D7		            ora $D7
  1230 3BC3 60			            rts
  1231 				; loop variables
  1232 3BC4 00			REALOOPCNT  .byte $00
  1233 3BC5 00			READIFLO    .byte $00
  1234 3BC6 00			READIFHI    .byte $00
  1235
  1236 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1237 				;
  1238 				; Segment for start address
  1239 				;
  1240 02E0-02E1> 03 30		            run start
  1241 				         
