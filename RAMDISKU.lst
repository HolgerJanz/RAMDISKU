mads 1.9.9
     1 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2 				;
     3 				; RAMDISK ULTIMATE for SpartaDOS 3 for tfhh SRAM512k and U1MB
     4 				;   COMPY and RAMBO up to 1024k
     5 				;   by hjx (x) 2020
     6 				;
     7 				; Previous work RD/RAMDISK.COM for SpartaDOS 3 by FTe
     8 				;   RD Ver 2.3 07-14-86 (c) 1984 by FTe
     9 				;
    10 				; System equates
    11 				;
    12 				; OS EQUATES
    13 				; ----------
    14 				; 
    15 				; IO EQUATES
    16 				; 
    17 = 0002			ICCOM       = $0002
    18 = 0008			ICBLL       = $0008
    19 = 0009			ICBLH       = $0009
    20 				; 
    21 				; OS VARIABLES FOR XL/XE
    22 				; 
    23 				; PAGE 0
    24 				; 
    25 = 000A			DOSVEC      = $000A
    26 = 000C			DOSINI      = $000C
    27 = 0012			RTCLOK      = $0012
    28 = 0032			BUFRLO      = $0032
    29 = 0033			BUFRHI      = $0033
    30 = 0034			BFENLO      = $0034
    31 = 0035			BFENHI      = $0035
    32 = 0042			CRITIC      = $0042
    33 = 00D0			ZBNKSWTMSK  = $00D0
    34 				; 
    35 				; PAGE 2
    36 				; 
    37 = 022F			SDMCTL      = $022F
    38 = 02E7			MEMLO       = $02E7
    39 				; 
    40 				; PAGE 3
    41 				; 
    42 = 0300			DDEVIC      = $0300
    43 = 0301			DUNIT       = $0301
    44 = 0302			DCOMND      = $0302
    45 = 0304			DBUFLO      = $0304
    46 = 0305			DBUFHI      = $0305
    47 = 0308			DBYTLO      = $0308
    48 = 0309			DBYTHI      = $0309
    49 = 030A			DAUX1       = $030A
    50 = 030B			DAUX2       = $030B
    51 = 0340			IOCB0       = $0340
    52 				; 
    53 				; PIA
    54 				; 
    55 				;        PORTB $D301 XE
    56 				;        
    57 				;        0 - OS ROM on=1 off=0
    58 				;        1 - BASIC  on=0 off=1
    59 				;        2 - Bank-Switch
    60 				;        3 - Bank-Switch
    61 				;        4 - CPU-Switch   off=1 on=0
    62 				;        5 - ANTIC-Switch off=1 on=0
    63 				;        6 - unsued
    64 				;        7 - Self-Test on=0(if 0 is on) off=1
    65 				;        
    66 = D300			PORTA       = $D300
    67 = D301			PORTB       = $D301
    68 = D302			PACTL       = $D302
    69 = D303			PBCTL       = $D303
    70 				; 
    71 				; ANTIC
    72 				; 
    73 = D40E			NMIEN       = $D40E
    74 				; 
    75 				; ROM VECTORS
    76 				; 
    77 = E456			CIOV        = $E456
    78 				;
    79 				; SpartaDOS 
    80 				;
    81 = 000A			SD_BUFOFF      = $0A ; offset in line buffer
    82 = 003F			SD_LBUF        = $3F ; offset to line buffer
    83 = 0003			SD_ZCRNAME     = $03 ; offset for jmp to crunch name
    84 = 0021			SD_COMFNAM     = $21 ; offset to result buffer for crunch name 
    85 = 000A			SD_LSIO        = $0A ; negative offset to SIO vector
    86
    87 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    88 				;
    89 				; Start of code
    90 				;
    91 				            org $3000
    92 				            
    93 				; memory addresses to check for alias of main memory
    94 FFFF> 3000-3913> 00	RB256TEST1  .byte $00 
    95 3001 00			RB256TEST2  .byte $00
    96
    97 				; bit mask kind Rambo1 ($00), Rambo2 ($01), or Compy ($FF)
    98 3002 FF			USEDMASK    .byte $FF
    99 				            
   100 3003			start
   101 3003 20 4B 37		            jsr PRINT
   102 3006 52 61 6D 64 69 73 +             .byte 'Ramdisk Ultimate vers55 by hjx',$9B,$FF
   103 				       
   104 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   105 				;
   106 				; determine extended memory
   107 				;
   108 3026 A9 D4		            lda #<BNKSWTMSK             ; check Compy
   109 3028 85 D0		            sta ZBNKSWTMSK
   110 302A A9 38		            lda #>BNKSWTMSK
   111 302C 85 D1		            sta ZBNKSWTMSK+1
   112 302E 20 2E 36		            jsr CHKBNKS
   113 3031 8E C5 38		            stx BNKCNT
   114
   115 3034 A9 CB		            lda #<BNKSWTMSKR1           ; check Rambo1
   116 3036 85 D0		            sta ZBNKSWTMSK
   117 3038 A9 36		            lda #>BNKSWTMSKR1
   118 303A 85 D1		            sta ZBNKSWTMSK+1
   119 303C 20 2E 36		            jsr CHKBNKS
   120 303F EC C5 38		            cpx BNKCNT
   121 3042 30 0A		            bmi check_r2
   122 3044 F0 08		            beq check_r2
   123 3046 A9 00		            lda #$00
   124 3048 8D 02 30		            sta USEDMASK                ; used mask $00 Rambo1
   125 304B 8E C5 38		            stx BNKCNT                  ; save higher cnt
   126
   127 304E A9 0B		check_r2    lda #<BNKSWTMSKR2           ; check Rambo2
   128 3050 85 D0		            sta ZBNKSWTMSK
   129 3052 A9 37		            lda #>BNKSWTMSKR2
   130 3054 85 D1		            sta ZBNKSWTMSK+1
   131 3056 20 2E 36		            jsr CHKBNKS
   132 3059 EC C5 38		            cpx BNKCNT
   133 305C 30 1A		            bmi check_r1
   134 305E F0 18		            beq check_r1
   135 3060 A9 01		            lda #$01
   136 3062 8D 02 30		            sta USEDMASK                ; used mask $01 Rambo2
   137 3065 8E C5 38		            stx BNKCNT                  ; save higher cnt
   138
   139 3068 A2 00		            ldx #$00                    ; copy Rambo2 to mask
   140 306A BD 0B 37		CPYR2M      lda BNKSWTMSKR2,X
   141 306D 9D D4 38		            sta BNKSWTMSK,X
   142 3070 E8			            inx
   143 3071 E0 40		            cpx #$40  
   144 3073 D0 F5		            bne CPYR2M
   145 3075 4C 8A 30		            jmp start_rambo
   146
   147 3078			check_r1
   148 3078 2C 02 30		            bit USEDMASK
   149 307B 30 22		            bmi start_compy
   150 307D A2 00		            ldx #$00                    ; copy Rambo1 to mask
   151 307F BD CB 36		CPYR1M      lda BNKSWTMSKR1,X
   152 3082 9D D4 38		            sta BNKSWTMSK,X
   153 3085 E8			            inx
   154 3086 E0 40		            cpx #$40  
   155 3088 D0 F5		            bne CPYR1M
   156
   157 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   158 				;
   159 				; write kind of extended memory
   160 				;            
   161 308A			start_rambo
   162 308A 20 4B 37		            jsr PRINT
   163 308D 20 20 46 6F 75 6E +             .byte '  Found Rambo ',$FF
   164 309C 4C B5 30		            jmp start_check
   165
   166 309F			start_compy
   167 309F E0 04		            cpx #$04
   168 30A1 90 12		            bcc start_check
   169 30A3 20 4B 37		            jsr PRINT
   170 30A6 20 20 46 6F 75 6E +             .byte '  Found Compy ',$FF
   171
   172 30B5			start_check
   173 				; check bank count
   174 30B5 AE C5 38		            ldx BNKCNT
   175 30B8 E0 04		            cpx #$04
   176 30BA 90 15		            bcc EXT_NO
   177 30BC D0 36		            bne EXT_192
   178 30BE 20 4B 37		            jsr PRINT
   179 30C1 36 34 6B 20 62 69 +             .byte '64k bits 23',$9B,$FF
   180 30CE 4C 07 32		            jmp EXT_END
   181 				; no banks            
   182 30D1 20 4B 37		EXT_NO      jsr PRINT
   183 30D4 20 20 45 72 72 6F +             .byte '  Error: No extended memory',$9B,$FF
   184 30F1 4C 3F 32		            jmp PRNHLP
   185 				            
   186 30F4 E0 0C		EXT_192     cpx #$0C
   187 30F6 F0 17		            beq EXT_256
   188 30F8 B0 32		            bcs EXT_320
   189 30FA 20 4B 37		            jsr PRINT
   190 30FD 31 32 38 4B 20 62 +             .byte '128K bits 236',$9B,$FF
   191 310C 4C 07 32		            jmp EXT_END
   192
   193 310F 20 4B 37		EXT_256     jsr PRINT
   194 3112 31 39 32 4B 20 62 +             .byte '192K bits 2365 w/main',$9B,$FF
   195 3129 4C 07 32		            jmp EXT_END
   196 				            
   197 312C E0 10		EXT_320     cpx #$10
   198 312E D0 31		            bne EXT_576
   199 3130 2C 02 30		            bit USEDMASK
   200 3133 30 16		            bmi CMP_320
   201 3135 20 4B 37		            jsr PRINT
   202 3138 32 35 36 4B 20 62 +             .byte '256K bits 2365',$9B,$FF
   203 3148 4C 07 32		            jmp EXT_END
   204 314B 20 4B 37		CMP_320     jsr PRINT
   205 314E 32 35 36 4B 20 62 +             .byte '256K bits 2367',$9B,$FF
   206 315E 4C 07 32		            jmp EXT_END
   207
   208 3161 E0 20		EXT_576     cpx #$20
   209 3163 D0 4C		            bne EXT_1088     
   210 3165 2C 02 30		            bit USEDMASK
   211 3168 30 30		            bmi CMP_576
   212 316A D0 17		            bne RA2_576
   213 316C 20 4B 37		            jsr PRINT
   214 316F 35 31 32 4B 20 62 +             .byte '512K bits 23651',$9B,$FF
   215 3180 4C 07 32		            jmp EXT_END
   216 3183 20 4B 37		RA2_576     jsr PRINT
   217 3186 35 31 32 4B 20 62 +             .byte '512K bits 23657',$9B,$FF
   218 3197 4C 07 32		            jmp EXT_END
   219 319A 20 4B 37		CMP_576     jsr PRINT
   220 319D 35 31 32 4B 20 62 +             .byte '512K bits 23671',$9B,$FF
   221 31AE 4C 07 32		            jmp EXT_END
   222
   223 31B1 E0 40		EXT_1088    cpx #$40
   224 31B3 F0 03		            beq EXT_1088EQ
   225 31B5 4C D1 30		            jmp EXT_NO
   226 31B8 2C 02 30		EXT_1088EQ  bit USEDMASK
   227 31BB 30 34		            bmi CMP_1088
   228 31BD D0 19		            bne RA2_1088
   229 31BF 20 4B 37		            jsr PRINT
   230 31C2 31 30 32 34 4B 20 +             .byte '1024K bits 236517',$9B,$FF
   231 31D5 4C 07 32		            jmp EXT_END
   232 31D8 20 4B 37		RA2_1088    jsr PRINT
   233 31DB 31 30 32 34 4B 20 +             .byte '1024K bits 236571',$9B,$FF
   234 31EE 4C 07 32		            jmp EXT_END
   235 31F1 20 4B 37		CMP_1088    jsr PRINT
   236 31F4 31 30 32 34 4B 20 +             .byte '1024K bits 236710',$9B,$FF
   237
   238 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   239 				;
   240 				; parse parameter
   241 				;
   242 3207 A0 0A		EXT_END     ldy #SD_BUFOFF
   243 3209 B1 0A		            lda (DOSVEC),Y
   244 320B 18			            clc
   245 320C 69 3F		            adc #SD_LBUF
   246 320E A8			            tay
   247 320F B1 0A		            lda (DOSVEC),Y
   248 3211 C9 9B		            cmp #$9B
   249 3213 F0 03		            beq ERRDRVNR
   250 3215 4C DF 32		            jmp PRSPARM
   251 				; no parameter -> error
   252 3218 20 4B 37		ERRDRVNR    jsr PRINT
   253 321B 20 20 45 72 72 6F +             .byte '  Error: No drive number specified',$9B,$FF
   254 323F			PRNHLP
   255 323F 20 4B 37		            jsr PRINT
   256 3242 20 20 55 73 65 3A +             .byte '  Use: RAMDISKU Dx: [/EDF]',$9B
   257 325D 20 20 20 20 78 20 +             .byte '    x - drive number for ramdisk',$9B
   258 327E 20 20 20 20 45 20 +             .byte '    E - use 64K less extended memory',$9B
   259 32A3 20 20 20 20 44 20 +             .byte '    D - install ramdisk driver',$9B
   260 32C2 20 20 20 20 46 20 +             .byte '    F - format ramdisk',$9B,$FF
   261 32DA 60			            rts
   262 				; jump for jsr to crunch name
   263 32DB 4C FF FF		CRNAME      jmp $FFFF
   264
   265 32DE 00			RDBNKCNT    .byte $00
   266
   267 				; set crunch name address
   268 32DF A5 0A		PRSPARM     lda DOSVEC
   269 32E1 18			            clc
   270 32E2 69 03		            adc #SD_ZCRNAME
   271 32E4 8D DC 32		            sta CRNAME+1
   272 32E7 A5 0B		            lda DOSVEC+1
   273 32E9 69 00		            adc #$00
   274 32EB 8D DD 32		            sta CRNAME+2
   275 				; get drive number SD_COMFNAM starts alway with Dx:
   276 32EE 20 DB 32		            jsr CRNAME
   277 32F1 D0 47		            bne PARAMERR
   278 32F3 A0 22		            ldy #SD_COMFNAM+1
   279 32F5 B1 0A		            lda (DOSVEC),Y
   280 32F7 29 0F		            and #$0F
   281 32F9 8D D3 38		            sta DRVNUM
   282 				; check options /EDF
   283 32FC 20 DB 32		            jsr CRNAME
   284 32FF F0 64		            beq PRSPAREND
   285 3301 A0 24		            ldy #SD_COMFNAM+3
   286 3303 B1 0A		            lda (DOSVEC),Y
   287 3305 C9 2F		            cmp #'/'
   288 3307 D0 31		            bne PARAMERR
   289 3309 C8			PRSPARLOOP  iny
   290 330A B1 0A		            lda (DOSVEC),Y
   291 330C C9 9B		            cmp #$9B
   292 330E F0 55		            beq PRSPAREND
   293 				; save 4 banks for 130XE compatibilty
   294 3310 C9 45		            cmp #'E'
   295 3312 D0 08		            bne PRSPARNXT1
   296 3314 A9 04		            lda #$04
   297 3316 8D C6 38		            sta SPARBNKS
   298 3319 4C 09 33		            jmp PRSPARLOOP
   299 				; check install driver only
   300 331C C9 44		PRSPARNXT1  cmp #'D'
   301 331E D0 0B		            bne PRSPARNXT2
   302 3320 A9 FF		            lda #$FF
   303 3322 8D 64 33		            sta CHKPAROPT
   304 3325 8D E3 33		            sta CHKINIDRV
   305 3328 4C 09 33		            jmp PRSPARLOOP
   306 				; check format             
   307 332B C9 46		PRSPARNXT2  cmp #'F'
   308 332D D0 0B		            bne PARAMERR
   309 332F A9 FF		            lda #$FF
   310 3331 8D 64 33		            sta CHKPAROPT
   311 3334 8D 82 34		            sta CHKFRMT
   312 3337 4C 09 33		            jmp PRSPARLOOP
   313 333A 20 4B 37		PARAMERR    jsr PRINT
   314 333D 20 20 45 72 72 6F +             .byte '  Error: Wrong parameter specified',$9B,$FF
   315 3361 4C 3F 32		            jmp PRNHLP
   316
   317 3364 00			CHKPAROPT   .byte $00
   318
   319 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   320 				;
   321 				; check for spare banks
   322 				;
   323 3365			PRSPAREND
   324 3365 AD C6 38		            lda SPARBNKS
   325 3368 F0 53		            beq BNKCNTOK
   326 336A 20 4B 37		            jsr PRINT
   327 336D 20 20 55 73 65 20 +             .byte '  Use 64K less extended memory',$9B,$FF
   328 338D AD C5 38		            lda BNKCNT
   329 3390 C9 04		            cmp #$04
   330 3392 D0 29		            bne BNKCNTOK
   331 3394 20 4B 37		            jsr PRINT
   332 3397 20 20 45 72 72 6F +             .byte '  Error: No extra extended memory',$9B,$FF
   333 33BA 4C 3F 32		            jmp PRNHLP
   334 33BD			BNKCNTOK
   335 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   336 				;
   337 				; check for init driver and format
   338 				;
   339 				; set format and ini by options
   340 33BD 2C 64 33		            bit CHKPAROPT
   341 33C0 30 08		            bmi STRTINIFMT ; no options set default /DF
   342 33C2 A9 FF		            lda #$FF
   343 33C4 8D E3 33		            sta CHKINIDRV
   344 33C7 8D 82 34		            sta CHKFRMT
   345 33CA			STRTINIFMT
   346 				; install driver requested
   347 33CA 2C E3 33		            bit CHKINIDRV
   348 33CD 10 03		            bpl NOINIDRV
   349 33CF 20 E4 33		            jsr INIDRV
   350 33D2			NOINIDRV
   351 				; format if requested
   352 33D2 2C 64 33		            bit CHKPAROPT
   353 33D5 30 03		            bmi NOPREFRMT
   354 33D7 20 48 34		            jsr PREFRMT
   355 33DA			NOPREFRMT
   356 33DA 2C 82 34		            bit CHKFRMT
   357 33DD 10 03		            bpl NOFRMTRD
   358 33DF 20 83 34		            jsr FRMTRD
   359 33E2			NOFRMTRD
   360 33E2 60			            rts
   361
   362 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   363 				;
   364 				; Subroutine install driver
   365 				;
   366 33E3 00			CHKINIDRV   .byte $00
   367
   368 33E4			INIDRV
   369 				; set jsr to original DOSINI
   370 33E4 A5 0C		            lda DOSINI
   371 33E6 8D 82 37		            sta JSRDOSINI+1
   372 33E9 A5 0D		            lda DOSINI+1
   373 33EB 8D 83 37		            sta JSRDOSINI+2
   374 				; set MEMLO oldaddress, realloc
   375 33EE AD E7 02		            lda MEMLO
   376 33F1 8D D7 3A		            sta READSTADR
   377 33F4 8D DD 3A		            sta CPYTOADR
   378 33F7 AD E8 02		            lda MEMLO+1
   379 33FA 8D D8 3A		            sta READSTADR+1
   380 33FD 8D DE 3A		            sta CPYTOADR+1
   381 				; start realloc
   382 3400 20 E1 3A		            jsr REASTART
   383 				; set new DOSINI            
   384 3403 A9 81		REAL001     lda #<JSRDOSINI
   385 3405 85 0C		            sta DOSINI
   386 3407 A9 37		REAH001     lda #>JSRDOSINI
   387 3409 85 0D		            sta DOSINI+1
   388 				; get SIO and patch for RAMDISK
   389 340B 38			            sec
   390 340C A5 0A		            lda DOSVEC
   391 340E E9 0A		            sbc #SD_LSIO
   392 3410 85 32		            sta BUFRLO
   393 3412 A5 0B		            lda DOSVEC+1
   394 3414 E9 00		            sbc #$00
   395 3416 85 33		            sta BUFRHI
   396 3418 A0 00		            ldy #$00
   397 341A B1 32		            lda (BUFRLO),Y
   398 341C 8D 9F 37		REAA001     sta JMPSIO+1      ;realloc $33CA
   399 341F A9 8F		REAL002     lda #<RAMDSIO
   400 3421 91 32		            sta (BUFRLO),Y
   401 3423 C8			            iny
   402 3424 B1 32		            lda (BUFRLO),Y
   403 3426 8D A0 37		REAA002     sta JMPSIO+2      ;realloc $33D4
   404 3429 A9 37		REAH002     lda #>RAMDSIO
   405 342B 91 32		            sta (BUFRLO),Y
   406 				; set MEMLO            
   407 342D 20 84 37		REAA003     jsr SETMEMLO      ;realloc $33DB
   408 				; message
   409 3430 20 4B 37		            jsr PRINT
   410 3433 20 20 44 72 69 76 +             .byte '  Driver installed',$9B,$FF
   411 3447 60			            rts
   412
   413
   414 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   415 				;
   416 				; Subroutine preserve ramdisk
   417 				;
   418 3448			PREFRMT
   419 				; switch off interrupts
   420 3448 78			            sei
   421 3449 A9 00		            lda #$00
   422 344B 8D 0E D4		            sta NMIEN
   423 				; switch bank
   424 344E AD 01 D3		            lda PORTB
   425 3451 48			            pha
   426 3452 AE C6 38		            ldx SPARBNKS
   427 3455 BD D4 38		            lda BNKSWTMSK,X
   428 3458 8D 01 D3		            sta PORTB
   429 				; compare
   430 345B A2 16		            ldx #$16
   431 345D BD 03 36		CHKFRMTLOOP lda RDHEAD,X
   432 3460 DD 00 40		            cmp $4000,X
   433 3463 D0 0D		            bne CHKNOPREFRMT
   434 3465 E8			            inx
   435 3466 E0 21		            cpx #$21
   436 3468 D0 F3		            bne CHKFRMTLOOP
   437 				; clear format flag
   438 346A A9 00		            lda #$00
   439 346C 8D 82 34		            sta CHKFRMT
   440 346F 4C 77 34		            jmp CHKPREFRMTEND
   441 3472			CHKNOPREFRMT
   442 3472 A9 FF		            lda #$FF
   443 3474 8D 82 34		            sta CHKFRMT
   444 3477			CHKPREFRMTEND
   445 				; restore PORTB
   446 3477 68			            pla
   447 3478 8D 01 D3		            sta PORTB
   448 				; enable interrupts
   449 347B A9 E0		            lda #$E0
   450 347D 8D 0E D4		            sta NMIEN
   451 3480 58			            cli
   452 				; set format flag
   453 3481 60			            rts
   454 				            
   455 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   456 				;
   457 				; Subroutine format ramdisk
   458 				;
   459 3482 00			CHKFRMT     .byte $00
   460
   461 3483			FRMTRD
   462 				; switch off interrupts
   463 3483 78			            sei
   464 3484 A9 00		            lda #$00
   465 3486 8D 0E D4		            sta NMIEN
   466 				; switch bank
   467 3489 AD 01 D3		            lda PORTB
   468 348C 48			            pha
   469 348D AE C6 38		            ldx SPARBNKS
   470 3490 BD D4 38		            lda BNKSWTMSK,X
   471 3493 8D 01 D3		            sta PORTB
   472 				; clear loop
   473 3496 A9 00		            lda #$00
   474 3498 A8			            tay
   475 3499 99 00 40		FRMTCLP     sta $4000,Y
   476 349C 99 00 41		            sta $4100,Y
   477 349F 99 00 42		            sta $4200,Y
   478 34A2 99 00 43		            sta $4300,Y
   479 34A5 99 00 44		            sta $4400,Y
   480 34A8 99 00 45		            sta $4500,Y
   481 34AB 99 00 46		            sta $4600,Y
   482 34AE C8			            iny
   483 34AF D0 E8		            bne FRMTCLP
   484 				; header loop            
   485 34B1 A0 2A		            ldy #$2A
   486 34B3 B9 03 36		FRMTHLP     lda RDHEAD,Y
   487 34B6 99 00 40		            sta $4000,Y
   488 34B9 88			            dey
   489 34BA 10 F7		            bpl FRMTHLP
   490 34BC A9 60		            lda #$60    ; write RTS to second boot sector
   491 34BE 8D 80 40		            sta $4080   ; see header jmp $3080
   492 				; calc banks for ramdisk            
   493 34C1 AD C5 38		            lda BNKCNT
   494 34C4 38			            sec
   495 34C5 ED C6 38		            sbc SPARBNKS
   496 34C8 AA			            tax
   497 34C9 8E DE 32		            stx RDBNKCNT
   498 				; set size loop
   499 34CC A0 00		            ldy #$00
   500 34CE BD 68 35		FRMTSLP     lda RDSIZE-4,X
   501 34D1 99 0B 40		            sta $400B,Y       ; total number of sectors on the disk
   502 34D4 E8			            inx               ; and number of free sectors on the disk
   503 34D5 C8			            iny
   504 34D6 C0 04		            cpy #$04
   505 34D8 D0 F4		            bne FRMTSLP
   506 				; set free sector VTOC             
   507 34DA AD DE 32		            lda RDBNKCNT
   508 34DD 4A			            lsr
   509 34DE 4A			            lsr
   510 34DF AA			            tax
   511 34E0 20 5F 35		FRMTVTOCLP  jsr FILLHSEC
   512 34E3 AD 64 35		            lda L34AF+1
   513 34E6 18			            clc
   514 34E7 69 40		            adc #$40
   515 34E9 8D 64 35		            sta L34AF+1
   516 34EC AD 65 35		            lda L34AF+2
   517 34EF 69 00		            adc #$00
   518 34F1 8D 65 35		            sta L34AF+2
   519 34F4 CA			            dex
   520 34F5 D0 E9		            bne FRMTVTOCLP
   521 				; set sector numbers in boot sector and correct VTOC
   522 34F7 AD DE 32		            lda RDBNKCNT
   523 34FA AA			            tax
   524 34FB 38			            sec
   525 34FC E9 01		            sbc #$01
   526 34FE 4A			            lsr
   527 34FF 4A			            lsr
   528 3500 4A			            lsr                 ; 8 banks per sector of sector map
   529 3501 18			            clc
   530 3502 69 01		            adc #$01            
   531 3504 8D 0F 40		            sta $400F           ; number of bit map sectors used on the disk
   532 3507 18			            clc
   533 3508 69 04		            adc #$04
   534 350A 8D 09 40		            sta $4009           ; first sector map of the MAIN directory
   535 				; correct free sector map
   536 350D BD A8 35		            lda RDMAPSZ-4,X 
   537 3510 8D 80 41		            sta $4180
   538 3513 BD A9 35		            lda RDMAPSZ-3,X 
   539 3516 8D 81 41		            sta $4181
   540 				; calc adress for VTOC            
   541 3519 BD AA 35		            lda RDMAPSZ-2,X
   542 351C 85 32		            sta BUFRLO
   543 351E BD AB 35		            lda RDMAPSZ-1,X
   544 3521 85 33		            sta BUFRHI   
   545 3523 A0 04		            ldy #$04
   546 3525 AD 09 40		            lda $4009
   547 3528 18			            clc
   548 3529 69 01		            adc #$01
   549 352B 91 32		            sta (BUFRLO),Y
   550 				; create MAIN directory
   551 352D A2 00		            ldx #$00
   552 352F A0 80		            ldy #$80
   553 3531 BD EC 35		L349B       lda RDMAIN,X
   554 3534 91 32		            sta (BUFRLO),Y
   555 3536 E8			            inx
   556 3537 C8			            iny
   557 3538 E0 17		            cpx #$17
   558 353A D0 F5		            bne L349B
   559 				; restore PORTB
   560 353C 68			            pla
   561 353D 8D 01 D3		            sta PORTB
   562 				; enable interrupts
   563 3540 A9 E0		            lda #$E0
   564 3542 8D 0E D4		            sta NMIEN
   565 3545 58			            cli
   566 				; write message
   567 3546 20 4B 37		            jsr PRINT
   568 3549 20 20 52 61 6D 64 +             .byte '  Ramdisk formatted',$9B,$FF
   569 355E 60			            rts
   570 				; set VTOC            
   571 355F A0 00		FILLHSEC    ldy #$00
   572 3561 A9 FF		            lda #$FF
   573 3563 99 80 41		L34AF       sta $4180,Y
   574 3566 C8			            iny
   575 3567 C0 40		            cpy #$40
   576 3569 D0 F8		            bne L34AF
   577 356B 60			            rts
   578 				;
   579 				; data array for format ram disk
   580 				;
   581 				;                 total, free number of sectors
   582 356C			RDSIZE
   583 356C 00 02 F9 01		            .word $0200,$01F9 ; 64k
   584 3570 00 04 F9 03		            .word $0400,$03F9 ; 128k
   585 3574 00 06 F8 05		            .word $0600,$05F8 ; 192k
   586 3578 00 08 F8 07		            .word $0800,$07F8 ; 256k
   587 357C 00 0A F7 09		            .word $0A00,$09F7 ; 320k
   588 3580 00 0C F7 0B		            .word $0C00,$0BF7 ; 384k
   589 3584 00 0E F6 0D		            .word $0E00,$0DF6 ; 448k
   590 3588 00 10 F6 0F		            .word $1000,$0ff6 ; 512k
   591 				; extension for 1088k
   592 358C 00 00 00 00		            .word $0000,$0000 ; dummy
   593 3590 00 00 00 00		            .word $0000,$0000 ; dummy
   594 3594 00 00 00 00		            .word $0000,$0000 ; dummy
   595 3598 00 00 00 00		            .word $0000,$0000 ; dummy
   596 359C 00 00 00 00		            .word $0000,$0000 ; dummy
   597 35A0 00 00 00 00		            .word $0000,$0000 ; dummy
   598 35A4 00 1E F2 1D		            .word $1E00,$1DF2 ; 1024-64=960k reserve 4 banks (130XE)
   599 35A8 00 20 F2 1F		            .word $2000,$1ff2 ; 1024k
   600
   601 35AC			RDMAPSZ
   602 35AC 01 FF		            .byte $01,$FF       ; 64k
   603 35AE 00 42		            .word $4200
   604 				            
   605 35B0 01 FF		            .byte $01,$FF       ; 128k
   606 35B2 00 42		            .word $4200
   607 				            
   608 35B4 00 FF		            .byte $00,$FF       ; 192k
   609 35B6 80 42		            .word $4280
   610 				            
   611 35B8 00 FF		            .byte $00,$FF       ; 256k
   612 35BA 80 42		            .word $4280
   613 				            
   614 35BC 00 7F		            .byte $00,$7F       ; 320k
   615 35BE 00 43		            .word $4300
   616 				            
   617 35C0 00 7F		            .byte $00,$7F       ; 384k
   618 35C2 00 43		            .word $4300
   619 				            
   620 35C4 00 3F		            .byte $00,$3F       ; 448k
   621 35C6 80 43		            .word $4380
   622 				            
   623 35C8 00 3F		            .byte $00,$3F       ; 512k
   624 35CA 80 43		            .word $4380
   625
   626 				; extension for 1088k
   627 35CC 00 00		            .byte $00,$00       ; dummy
   628 35CE 00 00		            .word $0000
   629
   630 35D0 00 00		            .byte $00,$00       ; dummy
   631 35D2 00 00		            .word $000
   632
   633 35D4 00 00		            .byte $00,$00       ; dummy
   634 35D6 00 00		            .word $0000
   635
   636 35D8 00 00		            .byte $00,$00       ; dummy
   637 35DA 00 00		            .word $0000
   638
   639 35DC 00 00		            .byte $00,$00       ; dummy
   640 35DE 00 00		            .word $0000
   641
   642 35E0 00 00		            .byte $00,$00       ; dummy
   643 35E2 00 00		            .word $0000
   644
   645 35E4 00 03		            .byte $00,$03       ; 1024-64=960k reserve 4 banks (130XE)
   646 35E6 80 45		            .word $4580
   647
   648 35E8 00 03		            .byte $00,$03       ; 1024k 
   649 35EA 80 45		            .word $4580
   650
   651 35EC			RDMAIN
   652 35EC 28			            .byte $28                   ; ???
   653 35ED 00 00		            .byte $00,$00               ; Sector number of the parent directory, $00 this is root
   654 35EF 17 00 00		            .byte $17,$00,$00           ; Length of the directory in bytes
   655 35F2 4D 41 49 4E 20 20 +             .byte 'MAIN       '         ; Name of the directory padded with spaces (8 bytes)
   656 35FD 0B 07 47		            .byte $0b,$07,$47           ; Date DD/MM/YY
   657 3600 0B 0B 0B		            .byte $0b,$0b,$0b           ; Time HH:MM:SS
   658
   659 3603			RDHEAD
   660 3603 00			            .byte $00                   ; Usually 0. Some formatting tools put a $53 (='S) for SD here
   661 3604 03			            .byte $03                   ; Number of sectors to boot
   662 3605 00 07		            .byte $00,$07               ; Address where the boot sectors are loaded to
   663 3607 E0 07		            .byte $E0,$07               ; This address is copied to DOSINI. 2 bytes
   664 3609 4C 80 30		            .byte $4C,$80,$30           ; execution to code beginning jmp $3080
   665 360C 03 00		            .byte $03,$00               ; Sector number of the first sector map of the MAIN directory
   666 360E 00 04		            .byte $00,$04               ; Total number of sectors on the disk
   667 3610 F9 03		            .byte $F9,$03               ; Number of free sectors on the disk
   668 3612 01			            .byte $01                   ; Number of bit map sectors on the disk
   669 3613 04 00		            .byte $04,$00               ; Sector number of the first bit map sector
   670 3615 20 00		            .byte $20,$00               ; Sector number to begin the file data sector allocation search
   671 3617 00 00		            .byte $00,$00               ; Sector number to begin the directory data sector allocation search
   672 3619 52 41 4D 44 49 53 +             .byte 'RAMDISKU'            ; Disk volume name, 8 chars
   673 3621 00			            .byte $00                   ; Number of tracks on the disk, $00 for ramdisk or HD
   674 3622 80			            .byte $80                   ; Size of the sectors on this disk, $00 = 256 Byte
   675 3623 22			            .byte $22                   ; File system revision number of the disk format
   676 3624 00 00 00 00 00	            .byte $00,$00,$00,$00,$00   ; reserved - no known usage
   677 3629 00			            .byte $00                   ; Volume sequence number
   678 362A 16			            .byte $16                   ; Volume random number
   679 362B 00 00		            .byte $00,$00               ; Sector number of the first sector map of the file to be loaded when the disk is booted
   680 362D 00			            .byte $00                   ; This is the write LOCK flag, $FF locked, $00 unlocked
   681
   682 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   683 				;
   684 				; Subroutine check banks
   685 				;
   686 362E			CHKBNKS
   687 				; save PIA PORT B
   688 362E AD 01 D3		            lda PORTB
   689 3631 48			            pha
   690 				; switch off interrupts
   691 3632 AD 2F 02		            lda SDMCTL
   692 3635 8D CA 36		            sta SSDMCTL
   693 3638 A9 00		            lda #$00
   694 363A 8D 2F 02		            sta SDMCTL
   695 363D 20 C3 36		            jsr WAITSYNC
   696 				; switch off interrupts
   697 3640 78			            sei
   698 3641 A9 00		            lda #$00
   699 3643 8D 0E D4		            sta NMIEN
   700 				; try to save and write banks            
   701 3646 A0 3F		            ldy #$3F
   702 3648 B1 D0		BNKSAVWRT   lda (ZBNKSWTMSK),Y
   703 364A 8D 01 D3		            sta PORTB
   704 364D AD 00 70		            lda $7000
   705 3650 99 14 3A		            sta BNKSAVBUF,Y
   706 3653 B1 D0		            lda (ZBNKSWTMSK),Y
   707 3655 8D 00 70		            sta $7000
   708 3658 AD 01 70		            lda $7001
   709 365B 99 54 3A		            sta BNKSAVBUF2,Y
   710 365E B1 D0		            lda (ZBNKSWTMSK),Y
   711 3660 0A			            asl
   712 3661 8D 01 70		            sta $7001
   713 3664 88			            dey
   714 3665 10 E1		            bpl BNKSAVWRT
   715 				; write to check memory aliases (RAMBO 256k)
   716 3667 A9 FF		            lda #$FF
   717 3669 8D 00 30		            sta RB256TEST1
   718 366C A9 FF		            lda #$FF
   719 366E 8D 01 30		            sta RB256TEST2
   720 				; check banks
   721 3671 C8			BNKCHK      iny
   722 3672 B1 D0		            lda (ZBNKSWTMSK),Y
   723 3674 8D 01 D3		            sta PORTB
   724 3677 B1 D0		            lda (ZBNKSWTMSK),Y
   725 3679 CD 00 70		            cmp $7000
   726 367C D0 0D		            bne BNKSTOP
   727 367E B1 D0		            lda (ZBNKSWTMSK),Y
   728 3680 0A			            asl
   729 3681 CD 01 70		            cmp $7001
   730 3684 D0 05		            bne BNKSTOP
   731 3686 C0 3F		            cpy #$3F
   732 3688 D0 E7		            bne BNKCHK
   733 368A C8			            iny
   734 368B 98			BNKSTOP     tya                 ; save bank count in X
   735 368C AA			            tax
   736 				; restore banks
   737 368D A0 00		            ldy #$00
   738 368F B1 D0		BNKRESTR    lda (ZBNKSWTMSK),Y
   739 3691 8D 01 D3		            sta PORTB
   740 3694 B9 14 3A		            lda BNKSAVBUF,Y
   741 3697 8D 00 70		            sta $7000
   742 369A B9 54 3A		            lda BNKSAVBUF2,Y
   743 369D 8D 01 70		            sta $7001
   744 36A0 C8			            iny
   745 36A1 C0 40		            cpy #$40
   746 36A3 D0 EA		            bne BNKRESTR
   747 				; reset check memory aliases (RAMBO 256k)
   748 36A5 A9 00		            lda #$00
   749 36A7 8D 00 30		            sta RB256TEST1
   750 36AA A9 00		            lda #$00
   751 36AC 8D 01 30		            sta RB256TEST2
   752 				; restore PIA PORT B
   753 36AF 68			            pla
   754 36B0 8D 01 D3		            sta PORTB
   755 				; enable interrupts
   756 36B3 A9 E0		            lda #$E0
   757 36B5 8D 0E D4		            sta NMIEN
   758 36B8 58			            cli
   759 				; enable interrupts
   760 36B9 AD CA 36		            lda SSDMCTL
   761 36BC 8D 2F 02		            sta SDMCTL
   762 36BF 20 C3 36		            jsr WAITSYNC
   763 36C2 60			            rts
   764 				; wait for sync            
   765 36C3 A5 14		WAITSYNC    lda RTCLOK+2
   766 36C5 C5 14		WAITLOOP    cmp RTCLOK+2
   767 36C7 F0 FC		            beq WAITLOOP
   768 36C9 60			            rts            
   769 36CA 00			SSDMCTL     .byte $00
   770
   771 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   772 				;
   773 				; Bank masks Rambo 1 and 2
   774 				;
   775 36CB			BNKSWTMSKR1
   776 36CB E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE       ; 1110:0010 1110:0110 1110:1010 1110:1110
   777 36CF A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE       ; 1010:0010 1010:0110 1010:1010 1010:1110
   778 36D3 C2 C6 CA CE		            .byte $C2,$C6,$CA,$CE       ; 1100:0010 1100:0110 1100:1010 1100:1110
   779 36D7 82 86 8A 8E		            .byte $82,$86,$8A,$8E       ; 1000:0010 1000:0110 1000:1010 1000:1110
   780 36DB E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC       ; 1110:0000 1110:0100 1110:1000 1110:1100
   781 36DF A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC       ; 1010:0000 1010:0100 1010:1000 1010:1100
   782 36E3 C0 C4 C8 CC		            .byte $C0,$C4,$C8,$CC       ; 1100:0000 1100:0100 1100:1000 1100:1100
   783 36E7 80 84 88 8C		            .byte $80,$84,$88,$8C       ; 1000:0000 1000:0100 1000:1000 1000:1100
   784 				; extension for 1088k
   785 36EB 62 66 6A 6E		            .byte $62,$66,$6A,$6E       ; 0110:0010 0110:0110 0110:1010 0110:1110
   786 36EF 22 26 2A 2E		            .byte $22,$26,$2A,$2E       ; 0010:0010 0010:0110 0010:1010 0010:1110
   787 36F3 42 46 4A 4E		            .byte $42,$46,$4A,$4E       ; 0100:0010 0100:0110 0100:1010 0100:1110
   788 36F7 02 06 0A 0E		            .byte $02,$06,$0A,$0E       ; 0000:0010 0000:0110 0000:1010 0000:1110
   789 36FB 60 64 68 6C		            .byte $60,$64,$68,$6C       ; 0110:0000 0110:0100 0110:1000 0110:1100
   790 36FF 20 24 28 2C		            .byte $20,$24,$28,$2C       ; 0010:0000 0010:0100 0010:1000 0010:1100
   791 3703 40 44 48 4C		            .byte $40,$44,$48,$4C       ; 0100:0000 0100:0100 0100:1000 0100:1100
   792 3707 00 04 08 0C		            .byte $00,$04,$08,$0C       ; 0000:0000 0000:0100 0000:1000 0000:1100
   793
   794 370B			BNKSWTMSKR2
   795 370B E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE       ; 1110:0010 1110:0110 1110:1010 1110:1110
   796 370F A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE       ; 1010:0010 1010:0110 1010:1010 1010:1110
   797 3713 C2 C6 CA CE		            .byte $C2,$C6,$CA,$CE       ; 1100:0010 1100:0110 1100:1010 1100:1110
   798 3717 82 86 8A 8E		            .byte $82,$86,$8A,$8E       ; 1000:0010 1000:0110 1000:1010 1000:1110
   799 371B 62 66 6A 6E		            .byte $62,$66,$6A,$6E       ; 0110:0010 0110:0110 0110:1010 0110:1110
   800 371F 22 26 2A 2E		            .byte $22,$26,$2A,$2E       ; 0010:0010 0010:0110 0010:1010 0010:1110
   801 3723 42 46 4A 4E		            .byte $42,$46,$4A,$4E       ; 0100:0010 0100:0110 0100:1010 0100:1110
   802 3727 02 06 0A 0E		            .byte $02,$06,$0A,$0E       ; 0000:0010 0000:0110 0000:1010 0000:1110
   803 				; extension for 1088k
   804 372B E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC       ; 1110:0000 1110:0100 1110:1000 1110:1100
   805 372F A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC       ; 1010:0000 1010:0100 1010:1000 1010:1100
   806 3733 C0 C4 C8 CC		            .byte $C0,$C4,$C8,$CC       ; 1100:0000 1100:0100 1100:1000 1100:1100
   807 3737 80 84 88 8C		            .byte $80,$84,$88,$8C       ; 1000:0000 1000:0100 1000:1000 1000:1100
   808 373B 60 64 68 6C		            .byte $60,$64,$68,$6C       ; 0110:0000 0110:0100 0110:1000 0110:1100
   809 373F 20 24 28 2C		            .byte $20,$24,$28,$2C       ; 0010:0000 0010:0100 0010:1000 0010:1100
   810 3743 40 44 48 4C		            .byte $40,$44,$48,$4C       ; 0100:0000 0100:0100 0100:1000 0100:1100
   811 3747 00 04 08 0C		            .byte $00,$04,$08,$0C       ; 0000:0000 0000:0100 0000:1000 0000:1100
   812
   813 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   814 				;
   815 				; print subroutine            
   816 				;
   817 374B 68			PRINT       pla
   818 374C 8D 5C 37		            sta PRINTITER+1
   819 374F 68			            pla
   820 3750 8D 5D 37		            sta PRINTITER+2
   821 3753 EE 5C 37		PRINTLOOP   inc PRINTITER+1
   822 3756 D0 03		            bne PRINTITER
   823 3758 EE 5D 37		            inc PRINTITER+2
   824 375B AD FF FF		PRINTITER   lda $FFFF
   825 375E C9 FF		            cmp #$FF
   826 3760 F0 06		            beq PRINTEND
   827 3762 20 71 37		            jsr CIOPUTCHR
   828 3765 4C 53 37		            jmp PRINTLOOP
   829 3768 AD 5D 37		PRINTEND    lda PRINTITER+2
   830 376B 48			            pha
   831 376C AD 5C 37		            lda PRINTITER+1
   832 376F 48			            pha
   833 3770 60			            rts
   834 				; call cio put char subroutine
   835 3771 A2 00		CIOPUTCHR   ldx #$00
   836 3773 8E 48 03		            stx IOCB0+ICBLL
   837 3776 8E 49 03		            stx IOCB0+ICBLH
   838 3779 A0 0B		            ldy #$0B
   839 377B 8C 42 03		            sty IOCB0+ICCOM
   840 377E 4C 56 E4		            jmp CIOV
   841
   842
   843 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   844 				;;; BEGIN OF REALLOC BLOCK
   845 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   846 				;
   847 				; start of resident driver
   848 				;
   849 				; to realloc routines
   850 				; DOSINI set MEMLO at reset
   851 3781			REABEGIN
   852 3781 20 00 00		JSRDOSINI   jsr $0000
   853
   854 3784			SETMEMLO    
   855 3784 A9 14		REAL003     lda #<BNKSAVBUF
   856 3786 8D E7 02		            sta MEMLO
   857 3789 A9 3A		REAH003     lda #>BNKSAVBUF
   858 378B 8D E8 02		            sta MEMLO+1
   859 378E 60			            rts
   860 				; new DOSVEC for RAMDISK device
   861 378F AD 00 03		RAMDSIO     lda DDEVIC
   862 3792 C9 31		            cmp #$31
   863 3794 D0 08		            bne JMPSIO
   864 3796 AD 01 03		            lda DUNIT
   865 3799 CD D3 38		REAA004     cmp DRVNUM
   866 379C F0 03		            beq L358A
   867 379E 4C 00 00		JMPSIO      jmp $0000
   868 37A1 AD 04 03		L358A       lda DBUFLO
   869 37A4 85 34		            sta BFENLO
   870 37A6 AD 05 03		            lda DBUFHI
   871 37A9 85 35		            sta BFENHI
   872 37AB AD 02 03		            lda DCOMND
   873 				; command STATUS REQUEST
   874 37AE C9 53		            cmp #$53 
   875 37B0 D0 1B		            bne NEXT1
   876 37B2 AD CE 38		REAA009     lda L36BF
   877 37B5 4A			            lsr
   878 37B6 4A			            lsr
   879 37B7 49 30		            eor #$30
   880 37B9 AC CA 38		REAA010     ldy L36BB
   881 37BC C0 1A		            cpy #$1A
   882 37BE D0 02		            bne L35B4
   883 37C0 09 80		            ora #$80
   884 37C2 A0 00		L35B4       ldy #$00
   885 37C4 91 34		            sta (BFENLO),Y
   886 37C6 C8			            iny
   887 37C7 A9 FF		            lda #$FF
   888 37C9 91 34		            sta (BFENLO),Y
   889 37CB 30 22		            bmi JMPSIOEND
   890 				; command RETURN CONFIGURATION
   891 37CD C9 4E		NEXT1       cmp #$4E
   892 37CF D0 0C		            bne NEXT2
   893 37D1 A0 0B		            ldy #$0B            ; 12 bytes
   894 37D3			RETCNFLOOP
   895 37D3 B9 C7 38		REAA011     lda CONFBUF,Y
   896 37D6 91 34		            sta (BFENLO),Y
   897 37D8 88			            dey
   898 37D9 10 F8		            bpl RETCNFLOOP
   899 37DB 30 12		            bmi JMPSIOEND
   900 				; command SET CONFIGURATION
   901 37DD C9 4F		NEXT2       cmp #$4F
   902 37DF D0 11		            bne NEXT3
   903 37E1 A0 07		            ldy #$07
   904 37E3 B1 34		            lda (BFENLO),Y
   905 37E5 8D CE 38		REAA012     sta L36BF
   906 37E8 A0 03		            ldy #$03
   907 37EA B1 34		            lda (BFENLO),Y
   908 37EC 8D CA 38		REAA013     sta L36BB
   909
   910 37EF			JMPSIOEND
   911 37EF 4C BE 38		REAA014     jmp RDSIOEND
   912 				; command FORMAT DISK
   913 37F2 C9 21		NEXT3       cmp #$21
   914 37F4 D0 0B		            bne NEXT4
   915 37F6 A0 00		SIOFRMT     ldy #$00
   916 37F8 A9 FF		            lda #$FF
   917 37FA 91 34		            sta (BFENLO),Y
   918 37FC C8			            iny
   919 37FD 91 34		            sta (BFENLO),Y
   920 37FF D0 EE		            bne JMPSIOEND
   921 				; command FORMAT DISK ENHANCED
   922 3801 C9 22		NEXT4       cmp #$22
   923 3803 D0 0C		            bne NEXT5
   924 3805 A9 1A		            lda #$1A
   925 3807 8D CA 38		REAA015     sta L36BB
   926 380A A9 80		            lda #$80
   927 380C 8D CE 38		REAA016     sta L36BF
   928 380F D0 E5		            bne SIOFRMT
   929 				; command GET SECTOR
   930 3811 C9 52		NEXT5       cmp #$52
   931 3813 F0 0B		            beq PUTGETSEC
   932 				; command PUT SECTOR WITH VERIFY
   933 3815 C9 57		            cmp #$57
   934 3817 F0 07		            beq PUTGETSEC
   935 				; command PUT SECTOR
   936 3819 C9 50		            cmp #$50
   937 381B F0 03		            beq PUTGETSEC
   938 381D 4C C1 38		REAA020     jmp RDSIOEND+3
   939
   940 3820 A9 00		PUTGETSEC   lda #$00
   941 3822 85 32		            sta BUFRLO
   942 3824 AD 0A 03		            lda DAUX1
   943 3827 38			            sec
   944 3828 E9 01		            sbc #$01
   945 382A 85 33		            sta BUFRHI
   946 382C AD 0B 03		            lda DAUX2
   947 382F E9 00		            sbc #$00
   948 3831 06 33		            asl BUFRHI
   949 3833 2A			            rol
   950 3834 2C 08 03		            bit DBYTLO
   951 3837 30 06		            bmi L3631
   952 3839 0E CE 38		REAA017     asl L36BF
   953 383C 06 33		            asl BUFRHI
   954 383E 2A			            rol
   955 383F 48			L3631       pha
   956 3840 A5 33		            lda BUFRHI
   957 3842 4A			            lsr
   958 3843 4A			            lsr
   959 3844 66 32		            ror BUFRLO
   960 3846 09 40		            ora #$40
   961 3848 85 33		            sta BUFRHI
   962 				            
   963 384A AD 02 03		            lda DCOMND
   964 384D C9 52		            cmp #$52
   965 384F F0 0D		            beq L3656
   966 				            
   967 3851 A0 00		            ldy #$00
   968 3853 B1 34		L364B       lda (BFENLO),Y
   969 3855 99 14 39		REAA005     sta BUFFERXX1,Y
   970 3858 C8			            iny
   971 3859 CC 08 03		            cpy DBYTLO
   972 385C D0 F5		            bne L364B
   973 				; check bank number
   974 385E 68			L3656       pla
   975 385F 18			            clc
   976 3860 6D C6 38		REAA021     adc SPARBNKS
   977 3863 CD C5 38		REAA018     cmp BNKCNT
   978 3866 B0 59		            bcs RDSIOEND+3
   979 				; switch bank
   980 				            
   981 3868 A8			            tay
   982 3869 AE 01 D3		            ldx PORTB
   983 386C E6 42		            inc CRITIC
   984 386E 78			            sei
   985 386F A9 00		            lda #$00
   986 3871 8D 0E D4		            sta NMIEN
   987 				     
   988 3874 B9 D4 38		REAA019     lda BNKSWTMSK,Y
   989 3877 8D 01 D3		            sta PORTB
   990 				            
   991 387A A0 00		            ldy #$00
   992 387C AD 02 03		            lda DCOMND
   993 387F C9 52		            cmp #$52
   994 3881 D0 25		            bne L369B
   995 				            
   996 3883 B1 32		L367B       lda (BUFRLO),Y
   997 3885 99 14 39		REAA006     sta BUFFERXX1,Y
   998 3888 C8			            iny
   999 3889 CC 08 03		            cpy DBYTLO
  1000 388C D0 F5		            bne L367B
  1001 				; restore bank
  1002 388E 8E 01 D3		            stx PORTB
  1003 3891 A9 E0		            lda #$E0
  1004 3893 8D 0E D4		            sta NMIEN
  1005 3896 58			            cli
  1006 3897 C6 42		            dec CRITIC 
  1007 				             
  1008 3899 A0 00		            ldy #$00
  1009 389B			L368E
  1010 389B B9 14 39		REAA008     lda BUFFERXX1,Y
  1011 389E 91 34		            sta (BFENLO),Y
  1012 38A0 C8			            iny
  1013 38A1 CC 08 03		            cpy DBYTLO
  1014 38A4 D0 F5		            bne L368E
  1015 38A6 F0 16		            beq RDSIOEND
  1016 38A8			L369B
  1017 38A8 B9 14 39		REAA007     lda BUFFERXX1,Y
  1018 38AB 91 32		            sta (BUFRLO),Y
  1019 38AD C8			            iny
  1020 38AE CC 08 03		            cpy DBYTLO
  1021 38B1 D0 F5		            bne L369B
  1022 				; restore bank
  1023 38B3 8E 01 D3		            stx PORTB
  1024 38B6 A9 E0		            lda #$E0
  1025 38B8 8D 0E D4		            sta NMIEN
  1026 38BB 58			            cli
  1027 38BC C6 42		            dec CRITIC 
  1028 				            
  1029 38BE A0 01		RDSIOEND    ldy #$01
  1030 38C0 2C A0 8B		            bit $8BA0 ; $2c, ldy #$8b
  1031 38C3 98			            tya
  1032 38C4 60			            rts
  1033 				            
  1034 38C5 00			BNKCNT      .byte $00
  1035 38C6 00			SPARBNKS    .byte $00
  1036
  1037 				; drive configuration buffer
  1038 38C7 28 01 12		CONFBUF     .byte $28,$01,$12
  1039 38CA 00 00 00 00		L36BB       .byte $00,$00,$00,$00
  1040 38CE 80 FF 00 00 00	L36BF       .byte $80,$FF,$00,$00,$00
  1041
  1042 38D3 01			DRVNUM      .byte $01
  1043
  1044 				; Compy Shop
  1045 38D4			BNKSWTMSK
  1046 38D4 E2 E6 EA EE		            .byte $E2,$E6,$EA,$EE ; 1110:0010 1110:0110 1110:1010 1110:1110
  1047 38D8 A2 A6 AA AE		            .byte $A2,$A6,$AA,$AE ; 1010:0010 1010:0110 1010:1010 1010:1110
  1048 38DC 62 66 6A 6E		            .byte $62,$66,$6A,$6E ; 0110:0010 0110:0110 0110:1010 0110:1110 
  1049 38E0 22 26 2A 2E		            .byte $22,$26,$2A,$2E ; 0010:0010 0010:0110 0010:1010 0010:1110
  1050 38E4 E0 E4 E8 EC		            .byte $E0,$E4,$E8,$EC ; 1110:0000 1110:0100 1110:1000 1110:1100
  1051 38E8 A0 A4 A8 AC		            .byte $A0,$A4,$A8,$AC ; 1010:0000 1010:0100 1010:1000 1010:1100
  1052 38EC 60 64 68 6C		            .byte $60,$64,$68,$6C ; 0110:0000 0110:0100 0110:1000 0110:1100
  1053 38F0 20 24 28 2C		            .byte $20,$24,$28,$2C ; 0010:0000 0010:0100 0010:1000 0010:1100
  1054 				; extension for 1088k
  1055 38F4 E3 E7 EB EF		            .byte $E3,$E7,$EB,$EF ; 1110:0011 1110:0111 1110:1011 1110:1111
  1056 38F8 A3 A7 AB AF		            .byte $A3,$A7,$AB,$AF ; 1010:0011 1010:0111 1010:1011 1010:1111
  1057 38FC 63 67 6B 6F		            .byte $63,$67,$6B,$6F ; 0110:0011 0110:0111 0110:1011 0110:1111 
  1058 3900 23 27 2B 2F		            .byte $23,$27,$2B,$2F ; 0010:0011 0010:0111 0010:1011 0010:1111
  1059 3904 E1 E5 E9 ED		            .byte $E1,$E5,$E9,$ED ; 1110:0001 1110:0101 1110:1001 1110:1101
  1060 3908 A1 A5 A9 AD		            .byte $A1,$A5,$A9,$AD ; 1010:0001 1010:0101 1010:1001 1010:1101
  1061 390C 61 65 69 6D		            .byte $61,$65,$69,$6D ; 0110:0001 0110:0101 0110:1001 0110:1101
  1062 3910 21 25 29 2D		            .byte $21,$25,$29,$2D ; 0010:0001 0010:0101 0010:1001 0010:1101
  1063 				 
  1064
  1065 				; $100 Bytes
  1066 3914			BUFFERXX1
  1067
  1068 				;            org $37E6
  1069 = 3A14			REAEND      = BUFFERXX1 + $100
  1070 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1071 				;;; END OF REALLOC BLOCK
  1072 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1073
  1074
  1075 				; $20 Bytes extension $40
  1076 = 3A14			BNKSAVBUF   = REAEND
  1077
  1078 				; $20 bytes extension $40
  1079 				;            org $3806
  1080 = 3A54			BNKSAVBUF2  = BNKSAVBUF + $40
  1081
  1082 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1083 				;
  1084 				; Realloc data arrays
  1085 				; 
  1086 				;           org $3826
  1087 3914			            org BNKSAVBUF2 + $40
  1088 				; realloc whole addresses
  1089 3A94-3BA7> 1D 34		REATAB      .word REAA001+1 ;$33CA
  1090 3A96 27 34		            .word REAA002+1 ;$33D4
  1091 3A98 2E 34		            .word REAA003+1 ;$33DB
  1092 3A9A 9A 37		            .word REAA004+1 ;$3583
  1093 3A9C 56 38		            .word REAA005+1 ;$364E
  1094 3A9E 86 38		            .word REAA006+1 ;$367E
  1095 3AA0 A9 38		            .word REAA007+1 ;$369C
  1096 3AA2 9C 38		            .word REAA008+1 ;$368F
  1097 3AA4 B3 37		            .word REAA009+1 ;$35A5
  1098 3AA6 BA 37		            .word REAA010+1 ;$35AC
  1099 3AA8 D4 37		            .word REAA011+1 ;$35C6
  1100 3AAA E6 37		            .word REAA012+1 ;$35D8
  1101 3AAC ED 37		            .word REAA013+1 ;$35DF
  1102 3AAE F0 37		            .word REAA014+1 ;$35E2
  1103 3AB0 08 38		            .word REAA015+1 ;$35FA
  1104 3AB2 0D 38		            .word REAA016+1 ;$35FF
  1105 3AB4 3A 38		            .word REAA017+1 ;$362C
  1106 3AB6 64 38		            .word REAA018+1 ;$365C
  1107 3AB8 75 38		            .word REAA019+1 ;$3667
  1108 3ABA 1E 38		            .word REAA020+1 ;$3610
  1109 3ABC 61 38		            .word REAA021+1 ;$3659
  1110 3ABE 00 00		            .word $0000
  1111
  1112 				; realloc address low byte           
  1113 3AC0 04 34		            .word REAL001+1 ;$33B1
  1114 3AC2 20 34		            .word REAL002+1 ;$33CD
  1115 3AC4 85 37		            .word REAL003+1 ;$356E
  1116 3AC6 00 00		            .word $0000
  1117
  1118 				; realloc address high byte (address to high byte and value of low byte)
  1119 3AC8 08 34		            .word REAH001+1  ;$33B5
  1120 3ACA 81			            .byte <JSRDOSINI ;$6A
  1121 				                        
  1122 3ACB 2A 34		            .word REAH002+1 ;$33D7
  1123 3ACD 8F			            .byte <RAMDSIO  ;$78
  1124 				            
  1125 3ACE 8A 37		            .word REAH003+1  ;$3573
  1126 3AD0 14			            .byte <BNKSAVBUF ;$E6
  1127 				            
  1128 3AD1 00 00		            .word $0000
  1129 				            
  1130 				; realloc code pointer
  1131 3AD3 94 3A		REATABADR   .word REATAB
  1132 3AD5 81 37		REASRCADR   .word REABEGIN
  1133 3AD7 FF FF		READSTADR   .word $FFFF
  1134
  1135 				; copy code pointer
  1136 3AD9 81 37		CPYFROMADR  .word REABEGIN
  1137 3ADB 93 02		CPYLENGTH   .word REAEND-REABEGIN ;$027C
  1138 3ADD FF FF		CPYTOADR    .word $FFFF
  1139
  1140 3ADF 00 00		            .word $0000
  1141
  1142 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1143 				;
  1144 				; Subroutine realloc driver code
  1145 				;
  1146 3AE1 A9 00		REASTART    lda #$00
  1147 3AE3 8D A5 3B		            sta REALOOPCNT
  1148 3AE6 AE A5 3B		REALOOP     ldx REALOOPCNT
  1149 3AE9 BD D3 3A		            lda REATABADR,X
  1150 3AEC 8D 8B 3B		            sta L3910+1
  1151 3AEF BD D4 3A		            lda REATABADR+1,X
  1152 3AF2 8D 8C 3B		            sta L3910+2
  1153 3AF5 0D 8B 3B		            ora L3910+1
  1154 3AF8 D0 01		            bne L3881
  1155 3AFA 60			            rts
  1156 				            
  1157 3AFB 38			L3881       sec
  1158 3AFC BD D7 3A		            lda READSTADR,X
  1159 3AFF FD D5 3A		            sbc REASRCADR,X
  1160 3B02 8D A6 3B		            sta READIFLO
  1161 3B05 BD D8 3A		            lda READSTADR+1,X
  1162 3B08 FD D6 3A		            sbc REASRCADR+1,X
  1163 3B0B 8D A7 3B		            sta READIFHI
  1164 				            
  1165 3B0E 20 96 3B		L3894       jsr L391C
  1166 3B11 F0 13		            beq L38AC
  1167 3B13 B1 D7		            lda ($D7),Y
  1168 3B15 18			            clc
  1169 3B16 6D A6 3B		            adc READIFLO
  1170 3B19 91 D7		            sta ($D7),Y
  1171 3B1B C8			            iny
  1172 3B1C B1 D7		            lda ($D7),Y
  1173 3B1E 6D A7 3B		            adc READIFHI
  1174 3B21 91 D7		            sta ($D7),Y
  1175 3B23 4C 0E 3B		            jmp L3894
  1176 3B26 20 96 3B		L38AC       jsr L391C
  1177 3B29 F0 0B		            beq L38BC
  1178 3B2B B1 D7		            lda ($D7),Y
  1179 3B2D 18			            clc
  1180 3B2E 6D A6 3B		            adc READIFLO
  1181 3B31 91 D7		            sta ($D7),Y
  1182 3B33 4C 26 3B		            jmp L38AC
  1183 3B36 20 96 3B		L38BC       jsr L391C
  1184 3B39 F0 11		            beq L38D2
  1185 3B3B 20 8A 3B		            jsr L3910
  1186 3B3E 18			            clc
  1187 3B3F 6D A6 3B		            adc READIFLO
  1188 3B42 B1 D7		            lda ($D7),Y
  1189 3B44 6D A7 3B		            adc READIFHI
  1190 3B47 91 D7		            sta ($D7),Y
  1191 3B49 4C 36 3B		            jmp L38BC
  1192 3B4C AE A5 3B		L38D2       ldx REALOOPCNT
  1193
  1194 3B4F BD D9 3A		            lda CPYFROMADR,X
  1195 3B52 8D 6D 3B		            sta L38F2+1
  1196 3B55 BD DA 3A		            lda CPYFROMADR+1,X
  1197 3B58 8D 6E 3B		            sta L38F2+2
  1198
  1199 3B5B BD DD 3A		            lda CPYTOADR,X
  1200 3B5E 8D 70 3B		            sta L38F2+4
  1201 3B61 BD DE 3A		            lda CPYTOADR+1,X
  1202 3B64 8D 71 3B		            sta L38F2+5
  1203
  1204 3B67 BC DC 3A		            ldy CPYLENGTH+1,X
  1205 3B6A A2 00		            ldx #$00
  1206 3B6C BD FF FF		L38F2       lda $FFFF,X
  1207 3B6F 9D FF FF		            sta $FFFF,X
  1208 3B72 E8			            inx
  1209 3B73 D0 F7		            bne L38F2
  1210 3B75 EE 6E 3B		            inc L38F2+2
  1211 3B78 EE 71 3B		            inc L38F2+5
  1212 3B7B 88			            dey
  1213 3B7C 10 EE		            bpl L38F2
  1214 3B7E AD A5 3B		            lda REALOOPCNT
  1215 3B81 18			            clc
  1216 3B82 69 0C		            adc #$0C
  1217 3B84 8D A5 3B		            sta REALOOPCNT
  1218 3B87 4C E6 3A		            jmp REALOOP
  1219 				            
  1220 3B8A AD FF FF		L3910       lda $FFFF
  1221 3B8D EE 8B 3B		            inc L3910+1
  1222 3B90 D0 03		            bne L391B
  1223 3B92 EE 8C 3B		            inc L3910+2
  1224 3B95 60			L391B       rts
  1225
  1226 3B96 20 8A 3B		L391C       jsr L3910
  1227 3B99 85 D7		            sta $D7
  1228 3B9B 20 8A 3B		            jsr L3910
  1229 3B9E A0 00		            ldy #$00
  1230 3BA0 85 D8		            sta $D8
  1231 3BA2 05 D7		            ora $D7
  1232 3BA4 60			            rts
  1233 				; loop variables
  1234 3BA5 00			REALOOPCNT  .byte $00
  1235 3BA6 00			READIFLO    .byte $00
  1236 3BA7 00			READIFHI    .byte $00
  1237
  1238 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1239 				;
  1240 				; Segment for start address
  1241 				;
  1242 02E0-02E1> 03 30		            run start
  1243 				         
